// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: tax/v1/tax.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/prov100/dc2/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetTaxSchemesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaxSchemes []*TaxScheme `protobuf:"bytes,1,rep,name=tax_schemes,json=taxSchemes,proto3" json:"tax_schemes,omitempty"`
	NextCursor string       `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetTaxSchemesResponse) Reset() {
	*x = GetTaxSchemesResponse{}
	mi := &file_tax_v1_tax_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaxSchemesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaxSchemesResponse) ProtoMessage() {}

func (x *GetTaxSchemesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tax_v1_tax_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaxSchemesResponse.ProtoReflect.Descriptor instead.
func (*GetTaxSchemesResponse) Descriptor() ([]byte, []int) {
	return file_tax_v1_tax_proto_rawDescGZIP(), []int{0}
}

func (x *GetTaxSchemesResponse) GetTaxSchemes() []*TaxScheme {
	if x != nil {
		return x.TaxSchemes
	}
	return nil
}

func (x *GetTaxSchemesResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type GetTaxSchemesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetTaxSchemesRequest) Reset() {
	*x = GetTaxSchemesRequest{}
	mi := &file_tax_v1_tax_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaxSchemesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaxSchemesRequest) ProtoMessage() {}

func (x *GetTaxSchemesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tax_v1_tax_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaxSchemesRequest.ProtoReflect.Descriptor instead.
func (*GetTaxSchemesRequest) Descriptor() ([]byte, []int) {
	return file_tax_v1_tax_proto_rawDescGZIP(), []int{1}
}

func (x *GetTaxSchemesRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetTaxSchemesRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetTaxSchemesRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetTaxSchemesRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetTaxSchemeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetTaxSchemeRequest) Reset() {
	*x = GetTaxSchemeRequest{}
	mi := &file_tax_v1_tax_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaxSchemeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaxSchemeRequest) ProtoMessage() {}

func (x *GetTaxSchemeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tax_v1_tax_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaxSchemeRequest.ProtoReflect.Descriptor instead.
func (*GetTaxSchemeRequest) Descriptor() ([]byte, []int) {
	return file_tax_v1_tax_proto_rawDescGZIP(), []int{2}
}

func (x *GetTaxSchemeRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetTaxSchemeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaxScheme *TaxScheme `protobuf:"bytes,1,opt,name=tax_scheme,json=taxScheme,proto3" json:"tax_scheme,omitempty"`
}

func (x *GetTaxSchemeResponse) Reset() {
	*x = GetTaxSchemeResponse{}
	mi := &file_tax_v1_tax_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaxSchemeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaxSchemeResponse) ProtoMessage() {}

func (x *GetTaxSchemeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tax_v1_tax_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaxSchemeResponse.ProtoReflect.Descriptor instead.
func (*GetTaxSchemeResponse) Descriptor() ([]byte, []int) {
	return file_tax_v1_tax_proto_rawDescGZIP(), []int{3}
}

func (x *GetTaxSchemeResponse) GetTaxScheme() *TaxScheme {
	if x != nil {
		return x.TaxScheme
	}
	return nil
}

type TaxCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaxCategoryD *TaxCategoryD `protobuf:"bytes,1,opt,name=tax_category_d,json=taxCategoryD,proto3" json:"tax_category_d,omitempty"`
	CrUpdUser    *v1.CrUpdUser `protobuf:"bytes,2,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime    *v1.CrUpdTime `protobuf:"bytes,3,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *TaxCategory) Reset() {
	*x = TaxCategory{}
	mi := &file_tax_v1_tax_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxCategory) ProtoMessage() {}

func (x *TaxCategory) ProtoReflect() protoreflect.Message {
	mi := &file_tax_v1_tax_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxCategory.ProtoReflect.Descriptor instead.
func (*TaxCategory) Descriptor() ([]byte, []int) {
	return file_tax_v1_tax_proto_rawDescGZIP(), []int{4}
}

func (x *TaxCategory) GetTaxCategoryD() *TaxCategoryD {
	if x != nil {
		return x.TaxCategoryD
	}
	return nil
}

func (x *TaxCategory) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *TaxCategory) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type TaxCategoryD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                  []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                    string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	TcId                   string  `protobuf:"bytes,4,opt,name=tc_id,json=tcId,proto3" json:"tc_id,omitempty"`
	TaxCategoryName        string  `protobuf:"bytes,5,opt,name=tax_category_name,json=taxCategoryName,proto3" json:"tax_category_name,omitempty"`
	Percent                float32 `protobuf:"fixed32,6,opt,name=percent,proto3" json:"percent,omitempty"`
	BaseUnitMeasure        string  `protobuf:"bytes,7,opt,name=base_unit_measure,json=baseUnitMeasure,proto3" json:"base_unit_measure,omitempty"`
	PerUnitAmount          float64 `protobuf:"fixed64,8,opt,name=per_unit_amount,json=perUnitAmount,proto3" json:"per_unit_amount,omitempty"`
	TaxExemptionReasonCode string  `protobuf:"bytes,9,opt,name=tax_exemption_reason_code,json=taxExemptionReasonCode,proto3" json:"tax_exemption_reason_code,omitempty"`
	TaxExemptionReason     string  `protobuf:"bytes,10,opt,name=tax_exemption_reason,json=taxExemptionReason,proto3" json:"tax_exemption_reason,omitempty"`
	TierRange              string  `protobuf:"bytes,11,opt,name=tier_range,json=tierRange,proto3" json:"tier_range,omitempty"`
	TierRatePercent        float32 `protobuf:"fixed32,12,opt,name=tier_rate_percent,json=tierRatePercent,proto3" json:"tier_rate_percent,omitempty"`
	TaxSchemeId            uint32  `protobuf:"varint,13,opt,name=tax_scheme_id,json=taxSchemeId,proto3" json:"tax_scheme_id,omitempty"`
}

func (x *TaxCategoryD) Reset() {
	*x = TaxCategoryD{}
	mi := &file_tax_v1_tax_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxCategoryD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxCategoryD) ProtoMessage() {}

func (x *TaxCategoryD) ProtoReflect() protoreflect.Message {
	mi := &file_tax_v1_tax_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxCategoryD.ProtoReflect.Descriptor instead.
func (*TaxCategoryD) Descriptor() ([]byte, []int) {
	return file_tax_v1_tax_proto_rawDescGZIP(), []int{5}
}

func (x *TaxCategoryD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaxCategoryD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *TaxCategoryD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *TaxCategoryD) GetTcId() string {
	if x != nil {
		return x.TcId
	}
	return ""
}

func (x *TaxCategoryD) GetTaxCategoryName() string {
	if x != nil {
		return x.TaxCategoryName
	}
	return ""
}

func (x *TaxCategoryD) GetPercent() float32 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *TaxCategoryD) GetBaseUnitMeasure() string {
	if x != nil {
		return x.BaseUnitMeasure
	}
	return ""
}

func (x *TaxCategoryD) GetPerUnitAmount() float64 {
	if x != nil {
		return x.PerUnitAmount
	}
	return 0
}

func (x *TaxCategoryD) GetTaxExemptionReasonCode() string {
	if x != nil {
		return x.TaxExemptionReasonCode
	}
	return ""
}

func (x *TaxCategoryD) GetTaxExemptionReason() string {
	if x != nil {
		return x.TaxExemptionReason
	}
	return ""
}

func (x *TaxCategoryD) GetTierRange() string {
	if x != nil {
		return x.TierRange
	}
	return ""
}

func (x *TaxCategoryD) GetTierRatePercent() float32 {
	if x != nil {
		return x.TierRatePercent
	}
	return 0
}

func (x *TaxCategoryD) GetTaxSchemeId() uint32 {
	if x != nil {
		return x.TaxSchemeId
	}
	return 0
}

type CreateTaxCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TcId                   string  `protobuf:"bytes,1,opt,name=tc_id,json=tcId,proto3" json:"tc_id,omitempty"`
	TaxCategoryName        string  `protobuf:"bytes,2,opt,name=tax_category_name,json=taxCategoryName,proto3" json:"tax_category_name,omitempty"`
	Percent                float32 `protobuf:"fixed32,3,opt,name=percent,proto3" json:"percent,omitempty"`
	BaseUnitMeasure        string  `protobuf:"bytes,4,opt,name=base_unit_measure,json=baseUnitMeasure,proto3" json:"base_unit_measure,omitempty"`
	PerUnitAmount          float64 `protobuf:"fixed64,5,opt,name=per_unit_amount,json=perUnitAmount,proto3" json:"per_unit_amount,omitempty"`
	TaxExemptionReasonCode string  `protobuf:"bytes,6,opt,name=tax_exemption_reason_code,json=taxExemptionReasonCode,proto3" json:"tax_exemption_reason_code,omitempty"`
	TaxExemptionReason     string  `protobuf:"bytes,7,opt,name=tax_exemption_reason,json=taxExemptionReason,proto3" json:"tax_exemption_reason,omitempty"`
	TierRange              string  `protobuf:"bytes,8,opt,name=tier_range,json=tierRange,proto3" json:"tier_range,omitempty"`
	TierRatePercent        float32 `protobuf:"fixed32,9,opt,name=tier_rate_percent,json=tierRatePercent,proto3" json:"tier_rate_percent,omitempty"`
	TaxSchemeId            uint32  `protobuf:"varint,10,opt,name=tax_scheme_id,json=taxSchemeId,proto3" json:"tax_scheme_id,omitempty"`
	UserId                 string  `protobuf:"bytes,11,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail              string  `protobuf:"bytes,12,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId              string  `protobuf:"bytes,13,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateTaxCategoryRequest) Reset() {
	*x = CreateTaxCategoryRequest{}
	mi := &file_tax_v1_tax_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTaxCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaxCategoryRequest) ProtoMessage() {}

func (x *CreateTaxCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tax_v1_tax_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaxCategoryRequest.ProtoReflect.Descriptor instead.
func (*CreateTaxCategoryRequest) Descriptor() ([]byte, []int) {
	return file_tax_v1_tax_proto_rawDescGZIP(), []int{6}
}

func (x *CreateTaxCategoryRequest) GetTcId() string {
	if x != nil {
		return x.TcId
	}
	return ""
}

func (x *CreateTaxCategoryRequest) GetTaxCategoryName() string {
	if x != nil {
		return x.TaxCategoryName
	}
	return ""
}

func (x *CreateTaxCategoryRequest) GetPercent() float32 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *CreateTaxCategoryRequest) GetBaseUnitMeasure() string {
	if x != nil {
		return x.BaseUnitMeasure
	}
	return ""
}

func (x *CreateTaxCategoryRequest) GetPerUnitAmount() float64 {
	if x != nil {
		return x.PerUnitAmount
	}
	return 0
}

func (x *CreateTaxCategoryRequest) GetTaxExemptionReasonCode() string {
	if x != nil {
		return x.TaxExemptionReasonCode
	}
	return ""
}

func (x *CreateTaxCategoryRequest) GetTaxExemptionReason() string {
	if x != nil {
		return x.TaxExemptionReason
	}
	return ""
}

func (x *CreateTaxCategoryRequest) GetTierRange() string {
	if x != nil {
		return x.TierRange
	}
	return ""
}

func (x *CreateTaxCategoryRequest) GetTierRatePercent() float32 {
	if x != nil {
		return x.TierRatePercent
	}
	return 0
}

func (x *CreateTaxCategoryRequest) GetTaxSchemeId() uint32 {
	if x != nil {
		return x.TaxSchemeId
	}
	return 0
}

func (x *CreateTaxCategoryRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateTaxCategoryRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateTaxCategoryRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateTaxCategoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaxCategory *TaxCategory `protobuf:"bytes,1,opt,name=tax_category,json=taxCategory,proto3" json:"tax_category,omitempty"`
}

func (x *CreateTaxCategoryResponse) Reset() {
	*x = CreateTaxCategoryResponse{}
	mi := &file_tax_v1_tax_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTaxCategoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaxCategoryResponse) ProtoMessage() {}

func (x *CreateTaxCategoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tax_v1_tax_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaxCategoryResponse.ProtoReflect.Descriptor instead.
func (*CreateTaxCategoryResponse) Descriptor() ([]byte, []int) {
	return file_tax_v1_tax_proto_rawDescGZIP(), []int{7}
}

func (x *CreateTaxCategoryResponse) GetTaxCategory() *TaxCategory {
	if x != nil {
		return x.TaxCategory
	}
	return nil
}

type UpdateTaxCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaxCategoryName        string  `protobuf:"bytes,1,opt,name=tax_category_name,json=taxCategoryName,proto3" json:"tax_category_name,omitempty"`
	Percent                float32 `protobuf:"fixed32,2,opt,name=percent,proto3" json:"percent,omitempty"`
	BaseUnitMeasure        string  `protobuf:"bytes,3,opt,name=base_unit_measure,json=baseUnitMeasure,proto3" json:"base_unit_measure,omitempty"`
	PerUnitAmount          float64 `protobuf:"fixed64,4,opt,name=per_unit_amount,json=perUnitAmount,proto3" json:"per_unit_amount,omitempty"`
	TaxExemptionReasonCode string  `protobuf:"bytes,5,opt,name=tax_exemption_reason_code,json=taxExemptionReasonCode,proto3" json:"tax_exemption_reason_code,omitempty"`
	TaxExemptionReason     string  `protobuf:"bytes,6,opt,name=tax_exemption_reason,json=taxExemptionReason,proto3" json:"tax_exemption_reason,omitempty"`
	Id                     string  `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
	UserId                 string  `protobuf:"bytes,8,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail              string  `protobuf:"bytes,9,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId              string  `protobuf:"bytes,10,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UpdateTaxCategoryRequest) Reset() {
	*x = UpdateTaxCategoryRequest{}
	mi := &file_tax_v1_tax_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTaxCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaxCategoryRequest) ProtoMessage() {}

func (x *UpdateTaxCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tax_v1_tax_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaxCategoryRequest.ProtoReflect.Descriptor instead.
func (*UpdateTaxCategoryRequest) Descriptor() ([]byte, []int) {
	return file_tax_v1_tax_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateTaxCategoryRequest) GetTaxCategoryName() string {
	if x != nil {
		return x.TaxCategoryName
	}
	return ""
}

func (x *UpdateTaxCategoryRequest) GetPercent() float32 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *UpdateTaxCategoryRequest) GetBaseUnitMeasure() string {
	if x != nil {
		return x.BaseUnitMeasure
	}
	return ""
}

func (x *UpdateTaxCategoryRequest) GetPerUnitAmount() float64 {
	if x != nil {
		return x.PerUnitAmount
	}
	return 0
}

func (x *UpdateTaxCategoryRequest) GetTaxExemptionReasonCode() string {
	if x != nil {
		return x.TaxExemptionReasonCode
	}
	return ""
}

func (x *UpdateTaxCategoryRequest) GetTaxExemptionReason() string {
	if x != nil {
		return x.TaxExemptionReason
	}
	return ""
}

func (x *UpdateTaxCategoryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateTaxCategoryRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateTaxCategoryRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *UpdateTaxCategoryRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdateTaxCategoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateTaxCategoryResponse) Reset() {
	*x = UpdateTaxCategoryResponse{}
	mi := &file_tax_v1_tax_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTaxCategoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaxCategoryResponse) ProtoMessage() {}

func (x *UpdateTaxCategoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tax_v1_tax_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaxCategoryResponse.ProtoReflect.Descriptor instead.
func (*UpdateTaxCategoryResponse) Descriptor() ([]byte, []int) {
	return file_tax_v1_tax_proto_rawDescGZIP(), []int{9}
}

type TaxScheme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaxSchemeD *TaxSchemeD   `protobuf:"bytes,1,opt,name=tax_scheme_d,json=taxSchemeD,proto3" json:"tax_scheme_d,omitempty"`
	CrUpdUser  *v1.CrUpdUser `protobuf:"bytes,2,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime  *v1.CrUpdTime `protobuf:"bytes,3,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *TaxScheme) Reset() {
	*x = TaxScheme{}
	mi := &file_tax_v1_tax_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxScheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxScheme) ProtoMessage() {}

func (x *TaxScheme) ProtoReflect() protoreflect.Message {
	mi := &file_tax_v1_tax_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxScheme.ProtoReflect.Descriptor instead.
func (*TaxScheme) Descriptor() ([]byte, []int) {
	return file_tax_v1_tax_proto_rawDescGZIP(), []int{10}
}

func (x *TaxScheme) GetTaxSchemeD() *TaxSchemeD {
	if x != nil {
		return x.TaxSchemeD
	}
	return nil
}

func (x *TaxScheme) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *TaxScheme) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type TaxSchemeD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4         []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS           string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	TsId          string `protobuf:"bytes,4,opt,name=ts_id,json=tsId,proto3" json:"ts_id,omitempty"`
	TaxSchemeName string `protobuf:"bytes,5,opt,name=tax_scheme_name,json=taxSchemeName,proto3" json:"tax_scheme_name,omitempty"`
	TaxTypeCode   string `protobuf:"bytes,6,opt,name=tax_type_code,json=taxTypeCode,proto3" json:"tax_type_code,omitempty"`
	CurrencyCode  string `protobuf:"bytes,7,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
}

func (x *TaxSchemeD) Reset() {
	*x = TaxSchemeD{}
	mi := &file_tax_v1_tax_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxSchemeD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxSchemeD) ProtoMessage() {}

func (x *TaxSchemeD) ProtoReflect() protoreflect.Message {
	mi := &file_tax_v1_tax_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxSchemeD.ProtoReflect.Descriptor instead.
func (*TaxSchemeD) Descriptor() ([]byte, []int) {
	return file_tax_v1_tax_proto_rawDescGZIP(), []int{11}
}

func (x *TaxSchemeD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaxSchemeD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *TaxSchemeD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *TaxSchemeD) GetTsId() string {
	if x != nil {
		return x.TsId
	}
	return ""
}

func (x *TaxSchemeD) GetTaxSchemeName() string {
	if x != nil {
		return x.TaxSchemeName
	}
	return ""
}

func (x *TaxSchemeD) GetTaxTypeCode() string {
	if x != nil {
		return x.TaxTypeCode
	}
	return ""
}

func (x *TaxSchemeD) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

type CreateTaxSchemeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TsId          string `protobuf:"bytes,1,opt,name=ts_id,json=tsId,proto3" json:"ts_id,omitempty"`
	TaxSchemeName string `protobuf:"bytes,2,opt,name=tax_scheme_name,json=taxSchemeName,proto3" json:"tax_scheme_name,omitempty"`
	TaxTypeCode   string `protobuf:"bytes,3,opt,name=tax_type_code,json=taxTypeCode,proto3" json:"tax_type_code,omitempty"`
	CurrencyCode  string `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	UserId        string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail     string `protobuf:"bytes,6,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId     string `protobuf:"bytes,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateTaxSchemeRequest) Reset() {
	*x = CreateTaxSchemeRequest{}
	mi := &file_tax_v1_tax_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTaxSchemeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaxSchemeRequest) ProtoMessage() {}

func (x *CreateTaxSchemeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tax_v1_tax_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaxSchemeRequest.ProtoReflect.Descriptor instead.
func (*CreateTaxSchemeRequest) Descriptor() ([]byte, []int) {
	return file_tax_v1_tax_proto_rawDescGZIP(), []int{12}
}

func (x *CreateTaxSchemeRequest) GetTsId() string {
	if x != nil {
		return x.TsId
	}
	return ""
}

func (x *CreateTaxSchemeRequest) GetTaxSchemeName() string {
	if x != nil {
		return x.TaxSchemeName
	}
	return ""
}

func (x *CreateTaxSchemeRequest) GetTaxTypeCode() string {
	if x != nil {
		return x.TaxTypeCode
	}
	return ""
}

func (x *CreateTaxSchemeRequest) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *CreateTaxSchemeRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateTaxSchemeRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateTaxSchemeRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdateTaxSchemeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaxSchemeName string `protobuf:"bytes,1,opt,name=tax_scheme_name,json=taxSchemeName,proto3" json:"tax_scheme_name,omitempty"`
	TaxTypeCode   string `protobuf:"bytes,2,opt,name=tax_type_code,json=taxTypeCode,proto3" json:"tax_type_code,omitempty"`
	CurrencyCode  string `protobuf:"bytes,3,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	Id            string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	UserId        string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail     string `protobuf:"bytes,6,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId     string `protobuf:"bytes,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UpdateTaxSchemeRequest) Reset() {
	*x = UpdateTaxSchemeRequest{}
	mi := &file_tax_v1_tax_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTaxSchemeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaxSchemeRequest) ProtoMessage() {}

func (x *UpdateTaxSchemeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tax_v1_tax_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaxSchemeRequest.ProtoReflect.Descriptor instead.
func (*UpdateTaxSchemeRequest) Descriptor() ([]byte, []int) {
	return file_tax_v1_tax_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateTaxSchemeRequest) GetTaxSchemeName() string {
	if x != nil {
		return x.TaxSchemeName
	}
	return ""
}

func (x *UpdateTaxSchemeRequest) GetTaxTypeCode() string {
	if x != nil {
		return x.TaxTypeCode
	}
	return ""
}

func (x *UpdateTaxSchemeRequest) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *UpdateTaxSchemeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateTaxSchemeRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateTaxSchemeRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *UpdateTaxSchemeRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdateTaxSchemeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateTaxSchemeResponse) Reset() {
	*x = UpdateTaxSchemeResponse{}
	mi := &file_tax_v1_tax_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTaxSchemeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaxSchemeResponse) ProtoMessage() {}

func (x *UpdateTaxSchemeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tax_v1_tax_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaxSchemeResponse.ProtoReflect.Descriptor instead.
func (*UpdateTaxSchemeResponse) Descriptor() ([]byte, []int) {
	return file_tax_v1_tax_proto_rawDescGZIP(), []int{14}
}

type CreateTaxSchemeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaxScheme *TaxScheme `protobuf:"bytes,1,opt,name=tax_scheme,json=taxScheme,proto3" json:"tax_scheme,omitempty"`
}

func (x *CreateTaxSchemeResponse) Reset() {
	*x = CreateTaxSchemeResponse{}
	mi := &file_tax_v1_tax_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTaxSchemeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaxSchemeResponse) ProtoMessage() {}

func (x *CreateTaxSchemeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tax_v1_tax_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaxSchemeResponse.ProtoReflect.Descriptor instead.
func (*CreateTaxSchemeResponse) Descriptor() ([]byte, []int) {
	return file_tax_v1_tax_proto_rawDescGZIP(), []int{15}
}

func (x *CreateTaxSchemeResponse) GetTaxScheme() *TaxScheme {
	if x != nil {
		return x.TaxScheme
	}
	return nil
}

type TaxSchemeJurisdiction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaxSchemeJurisdictionD *TaxSchemeJurisdictionD `protobuf:"bytes,1,opt,name=tax_scheme_jurisdiction_d,json=taxSchemeJurisdictionD,proto3" json:"tax_scheme_jurisdiction_d,omitempty"`
	TaxSchemeInfo          *v1.TaxSchemeInfo       `protobuf:"bytes,2,opt,name=tax_scheme_info,json=taxSchemeInfo,proto3" json:"tax_scheme_info,omitempty"`
	CrUpdUser              *v1.CrUpdUser           `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime              *v1.CrUpdTime           `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *TaxSchemeJurisdiction) Reset() {
	*x = TaxSchemeJurisdiction{}
	mi := &file_tax_v1_tax_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxSchemeJurisdiction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxSchemeJurisdiction) ProtoMessage() {}

func (x *TaxSchemeJurisdiction) ProtoReflect() protoreflect.Message {
	mi := &file_tax_v1_tax_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxSchemeJurisdiction.ProtoReflect.Descriptor instead.
func (*TaxSchemeJurisdiction) Descriptor() ([]byte, []int) {
	return file_tax_v1_tax_proto_rawDescGZIP(), []int{16}
}

func (x *TaxSchemeJurisdiction) GetTaxSchemeJurisdictionD() *TaxSchemeJurisdictionD {
	if x != nil {
		return x.TaxSchemeJurisdictionD
	}
	return nil
}

func (x *TaxSchemeJurisdiction) GetTaxSchemeInfo() *v1.TaxSchemeInfo {
	if x != nil {
		return x.TaxSchemeInfo
	}
	return nil
}

func (x *TaxSchemeJurisdiction) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *TaxSchemeJurisdiction) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type TaxSchemeJurisdictionD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4     []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS       string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	AddressId uint32 `protobuf:"varint,4,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`
}

func (x *TaxSchemeJurisdictionD) Reset() {
	*x = TaxSchemeJurisdictionD{}
	mi := &file_tax_v1_tax_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxSchemeJurisdictionD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxSchemeJurisdictionD) ProtoMessage() {}

func (x *TaxSchemeJurisdictionD) ProtoReflect() protoreflect.Message {
	mi := &file_tax_v1_tax_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxSchemeJurisdictionD.ProtoReflect.Descriptor instead.
func (*TaxSchemeJurisdictionD) Descriptor() ([]byte, []int) {
	return file_tax_v1_tax_proto_rawDescGZIP(), []int{17}
}

func (x *TaxSchemeJurisdictionD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaxSchemeJurisdictionD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *TaxSchemeJurisdictionD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *TaxSchemeJurisdictionD) GetAddressId() uint32 {
	if x != nil {
		return x.AddressId
	}
	return 0
}

type CreateTaxSchemeJurisdictionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddrListAgencyId     string  `protobuf:"bytes,1,opt,name=addr_list_agency_id,json=addrListAgencyId,proto3" json:"addr_list_agency_id,omitempty"`
	AddrListId           string  `protobuf:"bytes,2,opt,name=addr_list_id,json=addrListId,proto3" json:"addr_list_id,omitempty"`
	AddrListVersionId    string  `protobuf:"bytes,3,opt,name=addr_list_version_id,json=addrListVersionId,proto3" json:"addr_list_version_id,omitempty"`
	AddressTypeCode      string  `protobuf:"bytes,4,opt,name=address_type_code,json=addressTypeCode,proto3" json:"address_type_code,omitempty"`
	AddressFormatCode    string  `protobuf:"bytes,5,opt,name=address_format_code,json=addressFormatCode,proto3" json:"address_format_code,omitempty"`
	Postbox              string  `protobuf:"bytes,6,opt,name=postbox,proto3" json:"postbox,omitempty"`
	Floor                string  `protobuf:"bytes,7,opt,name=floor,proto3" json:"floor,omitempty"`
	Room                 string  `protobuf:"bytes,8,opt,name=room,proto3" json:"room,omitempty"`
	StreetName           string  `protobuf:"bytes,9,opt,name=street_name,json=streetName,proto3" json:"street_name,omitempty"`
	AdditionalStreetName string  `protobuf:"bytes,10,opt,name=additional_street_name,json=additionalStreetName,proto3" json:"additional_street_name,omitempty"`
	BlockName            string  `protobuf:"bytes,11,opt,name=block_name,json=blockName,proto3" json:"block_name,omitempty"`
	BuildingName         string  `protobuf:"bytes,12,opt,name=building_name,json=buildingName,proto3" json:"building_name,omitempty"`
	BuildingNumber       string  `protobuf:"bytes,13,opt,name=building_number,json=buildingNumber,proto3" json:"building_number,omitempty"`
	InhouseMail          string  `protobuf:"bytes,14,opt,name=inhouse_mail,json=inhouseMail,proto3" json:"inhouse_mail,omitempty"`
	Department           string  `protobuf:"bytes,15,opt,name=department,proto3" json:"department,omitempty"`
	MarkAttention        string  `protobuf:"bytes,16,opt,name=mark_attention,json=markAttention,proto3" json:"mark_attention,omitempty"`
	MarkCare             string  `protobuf:"bytes,17,opt,name=mark_care,json=markCare,proto3" json:"mark_care,omitempty"`
	PlotIdentification   string  `protobuf:"bytes,18,opt,name=plot_identification,json=plotIdentification,proto3" json:"plot_identification,omitempty"`
	CitySubdivisionName  string  `protobuf:"bytes,19,opt,name=city_subdivision_name,json=citySubdivisionName,proto3" json:"city_subdivision_name,omitempty"`
	CityName             string  `protobuf:"bytes,20,opt,name=city_name,json=cityName,proto3" json:"city_name,omitempty"`
	PostalZone           string  `protobuf:"bytes,21,opt,name=postal_zone,json=postalZone,proto3" json:"postal_zone,omitempty"`
	CountrySubentity     string  `protobuf:"bytes,22,opt,name=country_subentity,json=countrySubentity,proto3" json:"country_subentity,omitempty"`
	CountrySubentityCode string  `protobuf:"bytes,23,opt,name=country_subentity_code,json=countrySubentityCode,proto3" json:"country_subentity_code,omitempty"`
	Region               string  `protobuf:"bytes,24,opt,name=region,proto3" json:"region,omitempty"`
	District             string  `protobuf:"bytes,25,opt,name=district,proto3" json:"district,omitempty"`
	TimezoneOffset       string  `protobuf:"bytes,26,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`
	CountryIdCode        string  `protobuf:"bytes,27,opt,name=country_id_code,json=countryIdCode,proto3" json:"country_id_code,omitempty"`
	CountryName          string  `protobuf:"bytes,28,opt,name=country_name,json=countryName,proto3" json:"country_name,omitempty"`
	LocationCoordLat     float64 `protobuf:"fixed64,29,opt,name=location_coord_lat,json=locationCoordLat,proto3" json:"location_coord_lat,omitempty"`
	LocationCoordLon     float64 `protobuf:"fixed64,30,opt,name=location_coord_lon,json=locationCoordLon,proto3" json:"location_coord_lon,omitempty"`
	Note                 string  `protobuf:"bytes,31,opt,name=note,proto3" json:"note,omitempty"`
	TaxSchemeId          uint32  `protobuf:"varint,32,opt,name=tax_scheme_id,json=taxSchemeId,proto3" json:"tax_scheme_id,omitempty"`
	TaxSchemeName        string  `protobuf:"bytes,33,opt,name=tax_scheme_name,json=taxSchemeName,proto3" json:"tax_scheme_name,omitempty"`
	UserId               string  `protobuf:"bytes,34,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail            string  `protobuf:"bytes,35,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId            string  `protobuf:"bytes,36,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateTaxSchemeJurisdictionRequest) Reset() {
	*x = CreateTaxSchemeJurisdictionRequest{}
	mi := &file_tax_v1_tax_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTaxSchemeJurisdictionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaxSchemeJurisdictionRequest) ProtoMessage() {}

func (x *CreateTaxSchemeJurisdictionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tax_v1_tax_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaxSchemeJurisdictionRequest.ProtoReflect.Descriptor instead.
func (*CreateTaxSchemeJurisdictionRequest) Descriptor() ([]byte, []int) {
	return file_tax_v1_tax_proto_rawDescGZIP(), []int{18}
}

func (x *CreateTaxSchemeJurisdictionRequest) GetAddrListAgencyId() string {
	if x != nil {
		return x.AddrListAgencyId
	}
	return ""
}

func (x *CreateTaxSchemeJurisdictionRequest) GetAddrListId() string {
	if x != nil {
		return x.AddrListId
	}
	return ""
}

func (x *CreateTaxSchemeJurisdictionRequest) GetAddrListVersionId() string {
	if x != nil {
		return x.AddrListVersionId
	}
	return ""
}

func (x *CreateTaxSchemeJurisdictionRequest) GetAddressTypeCode() string {
	if x != nil {
		return x.AddressTypeCode
	}
	return ""
}

func (x *CreateTaxSchemeJurisdictionRequest) GetAddressFormatCode() string {
	if x != nil {
		return x.AddressFormatCode
	}
	return ""
}

func (x *CreateTaxSchemeJurisdictionRequest) GetPostbox() string {
	if x != nil {
		return x.Postbox
	}
	return ""
}

func (x *CreateTaxSchemeJurisdictionRequest) GetFloor() string {
	if x != nil {
		return x.Floor
	}
	return ""
}

func (x *CreateTaxSchemeJurisdictionRequest) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

func (x *CreateTaxSchemeJurisdictionRequest) GetStreetName() string {
	if x != nil {
		return x.StreetName
	}
	return ""
}

func (x *CreateTaxSchemeJurisdictionRequest) GetAdditionalStreetName() string {
	if x != nil {
		return x.AdditionalStreetName
	}
	return ""
}

func (x *CreateTaxSchemeJurisdictionRequest) GetBlockName() string {
	if x != nil {
		return x.BlockName
	}
	return ""
}

func (x *CreateTaxSchemeJurisdictionRequest) GetBuildingName() string {
	if x != nil {
		return x.BuildingName
	}
	return ""
}

func (x *CreateTaxSchemeJurisdictionRequest) GetBuildingNumber() string {
	if x != nil {
		return x.BuildingNumber
	}
	return ""
}

func (x *CreateTaxSchemeJurisdictionRequest) GetInhouseMail() string {
	if x != nil {
		return x.InhouseMail
	}
	return ""
}

func (x *CreateTaxSchemeJurisdictionRequest) GetDepartment() string {
	if x != nil {
		return x.Department
	}
	return ""
}

func (x *CreateTaxSchemeJurisdictionRequest) GetMarkAttention() string {
	if x != nil {
		return x.MarkAttention
	}
	return ""
}

func (x *CreateTaxSchemeJurisdictionRequest) GetMarkCare() string {
	if x != nil {
		return x.MarkCare
	}
	return ""
}

func (x *CreateTaxSchemeJurisdictionRequest) GetPlotIdentification() string {
	if x != nil {
		return x.PlotIdentification
	}
	return ""
}

func (x *CreateTaxSchemeJurisdictionRequest) GetCitySubdivisionName() string {
	if x != nil {
		return x.CitySubdivisionName
	}
	return ""
}

func (x *CreateTaxSchemeJurisdictionRequest) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *CreateTaxSchemeJurisdictionRequest) GetPostalZone() string {
	if x != nil {
		return x.PostalZone
	}
	return ""
}

func (x *CreateTaxSchemeJurisdictionRequest) GetCountrySubentity() string {
	if x != nil {
		return x.CountrySubentity
	}
	return ""
}

func (x *CreateTaxSchemeJurisdictionRequest) GetCountrySubentityCode() string {
	if x != nil {
		return x.CountrySubentityCode
	}
	return ""
}

func (x *CreateTaxSchemeJurisdictionRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CreateTaxSchemeJurisdictionRequest) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *CreateTaxSchemeJurisdictionRequest) GetTimezoneOffset() string {
	if x != nil {
		return x.TimezoneOffset
	}
	return ""
}

func (x *CreateTaxSchemeJurisdictionRequest) GetCountryIdCode() string {
	if x != nil {
		return x.CountryIdCode
	}
	return ""
}

func (x *CreateTaxSchemeJurisdictionRequest) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *CreateTaxSchemeJurisdictionRequest) GetLocationCoordLat() float64 {
	if x != nil {
		return x.LocationCoordLat
	}
	return 0
}

func (x *CreateTaxSchemeJurisdictionRequest) GetLocationCoordLon() float64 {
	if x != nil {
		return x.LocationCoordLon
	}
	return 0
}

func (x *CreateTaxSchemeJurisdictionRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CreateTaxSchemeJurisdictionRequest) GetTaxSchemeId() uint32 {
	if x != nil {
		return x.TaxSchemeId
	}
	return 0
}

func (x *CreateTaxSchemeJurisdictionRequest) GetTaxSchemeName() string {
	if x != nil {
		return x.TaxSchemeName
	}
	return ""
}

func (x *CreateTaxSchemeJurisdictionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateTaxSchemeJurisdictionRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateTaxSchemeJurisdictionRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateTaxSchemeJurisdictionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaxSchemeJurisdiction *TaxSchemeJurisdiction `protobuf:"bytes,1,opt,name=tax_scheme_jurisdiction,json=taxSchemeJurisdiction,proto3" json:"tax_scheme_jurisdiction,omitempty"`
}

func (x *CreateTaxSchemeJurisdictionResponse) Reset() {
	*x = CreateTaxSchemeJurisdictionResponse{}
	mi := &file_tax_v1_tax_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTaxSchemeJurisdictionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaxSchemeJurisdictionResponse) ProtoMessage() {}

func (x *CreateTaxSchemeJurisdictionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tax_v1_tax_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaxSchemeJurisdictionResponse.ProtoReflect.Descriptor instead.
func (*CreateTaxSchemeJurisdictionResponse) Descriptor() ([]byte, []int) {
	return file_tax_v1_tax_proto_rawDescGZIP(), []int{19}
}

func (x *CreateTaxSchemeJurisdictionResponse) GetTaxSchemeJurisdiction() *TaxSchemeJurisdiction {
	if x != nil {
		return x.TaxSchemeJurisdiction
	}
	return nil
}

type UpdateTaxSchemeJurisdictionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaxSchemeId   uint32 `protobuf:"varint,1,opt,name=tax_scheme_id,json=taxSchemeId,proto3" json:"tax_scheme_id,omitempty"`
	TaxSchemeName string `protobuf:"bytes,2,opt,name=tax_scheme_name,json=taxSchemeName,proto3" json:"tax_scheme_name,omitempty"`
	Id            string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	UserId        string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail     string `protobuf:"bytes,5,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId     string `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UpdateTaxSchemeJurisdictionRequest) Reset() {
	*x = UpdateTaxSchemeJurisdictionRequest{}
	mi := &file_tax_v1_tax_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTaxSchemeJurisdictionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaxSchemeJurisdictionRequest) ProtoMessage() {}

func (x *UpdateTaxSchemeJurisdictionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tax_v1_tax_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaxSchemeJurisdictionRequest.ProtoReflect.Descriptor instead.
func (*UpdateTaxSchemeJurisdictionRequest) Descriptor() ([]byte, []int) {
	return file_tax_v1_tax_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateTaxSchemeJurisdictionRequest) GetTaxSchemeId() uint32 {
	if x != nil {
		return x.TaxSchemeId
	}
	return 0
}

func (x *UpdateTaxSchemeJurisdictionRequest) GetTaxSchemeName() string {
	if x != nil {
		return x.TaxSchemeName
	}
	return ""
}

func (x *UpdateTaxSchemeJurisdictionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateTaxSchemeJurisdictionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateTaxSchemeJurisdictionRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *UpdateTaxSchemeJurisdictionRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdateTaxSchemeJurisdictionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateTaxSchemeJurisdictionResponse) Reset() {
	*x = UpdateTaxSchemeJurisdictionResponse{}
	mi := &file_tax_v1_tax_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTaxSchemeJurisdictionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaxSchemeJurisdictionResponse) ProtoMessage() {}

func (x *UpdateTaxSchemeJurisdictionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tax_v1_tax_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaxSchemeJurisdictionResponse.ProtoReflect.Descriptor instead.
func (*UpdateTaxSchemeJurisdictionResponse) Descriptor() ([]byte, []int) {
	return file_tax_v1_tax_proto_rawDescGZIP(), []int{21}
}

type TaxSubTotal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaxSubTotalD *TaxSubTotalD `protobuf:"bytes,1,opt,name=tax_sub_total_d,json=taxSubTotalD,proto3" json:"tax_sub_total_d,omitempty"`
	CrUpdUser    *v1.CrUpdUser `protobuf:"bytes,2,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime    *v1.CrUpdTime `protobuf:"bytes,3,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *TaxSubTotal) Reset() {
	*x = TaxSubTotal{}
	mi := &file_tax_v1_tax_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxSubTotal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxSubTotal) ProtoMessage() {}

func (x *TaxSubTotal) ProtoReflect() protoreflect.Message {
	mi := &file_tax_v1_tax_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxSubTotal.ProtoReflect.Descriptor instead.
func (*TaxSubTotal) Descriptor() ([]byte, []int) {
	return file_tax_v1_tax_proto_rawDescGZIP(), []int{22}
}

func (x *TaxSubTotal) GetTaxSubTotalD() *TaxSubTotalD {
	if x != nil {
		return x.TaxSubTotalD
	}
	return nil
}

func (x *TaxSubTotal) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *TaxSubTotal) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type TaxSubTotalD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                           uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                        []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                          string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	TaxableAmount                float64 `protobuf:"fixed64,4,opt,name=taxable_amount,json=taxableAmount,proto3" json:"taxable_amount,omitempty"`
	TaxAmount                    float64 `protobuf:"fixed64,5,opt,name=tax_amount,json=taxAmount,proto3" json:"tax_amount,omitempty"`
	CalculationSequenceNumeric   uint32  `protobuf:"varint,6,opt,name=calculation_sequence_numeric,json=calculationSequenceNumeric,proto3" json:"calculation_sequence_numeric,omitempty"`
	TransactionCurrencyTaxAmount float64 `protobuf:"fixed64,7,opt,name=transaction_currency_tax_amount,json=transactionCurrencyTaxAmount,proto3" json:"transaction_currency_tax_amount,omitempty"`
	Percent                      float32 `protobuf:"fixed32,8,opt,name=percent,proto3" json:"percent,omitempty"`
	BaseUnitMeasure              string  `protobuf:"bytes,9,opt,name=base_unit_measure,json=baseUnitMeasure,proto3" json:"base_unit_measure,omitempty"`
	PerUnitAmount                float64 `protobuf:"fixed64,10,opt,name=per_unit_amount,json=perUnitAmount,proto3" json:"per_unit_amount,omitempty"`
	TierRange                    string  `protobuf:"bytes,11,opt,name=tier_range,json=tierRange,proto3" json:"tier_range,omitempty"`
	TierRatePercent              float64 `protobuf:"fixed64,12,opt,name=tier_rate_percent,json=tierRatePercent,proto3" json:"tier_rate_percent,omitempty"`
	TaxCategoryId                uint32  `protobuf:"varint,13,opt,name=tax_category_id,json=taxCategoryId,proto3" json:"tax_category_id,omitempty"`
	TaxTotalId                   uint32  `protobuf:"varint,14,opt,name=tax_total_id,json=taxTotalId,proto3" json:"tax_total_id,omitempty"`
}

func (x *TaxSubTotalD) Reset() {
	*x = TaxSubTotalD{}
	mi := &file_tax_v1_tax_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxSubTotalD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxSubTotalD) ProtoMessage() {}

func (x *TaxSubTotalD) ProtoReflect() protoreflect.Message {
	mi := &file_tax_v1_tax_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxSubTotalD.ProtoReflect.Descriptor instead.
func (*TaxSubTotalD) Descriptor() ([]byte, []int) {
	return file_tax_v1_tax_proto_rawDescGZIP(), []int{23}
}

func (x *TaxSubTotalD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaxSubTotalD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *TaxSubTotalD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *TaxSubTotalD) GetTaxableAmount() float64 {
	if x != nil {
		return x.TaxableAmount
	}
	return 0
}

func (x *TaxSubTotalD) GetTaxAmount() float64 {
	if x != nil {
		return x.TaxAmount
	}
	return 0
}

func (x *TaxSubTotalD) GetCalculationSequenceNumeric() uint32 {
	if x != nil {
		return x.CalculationSequenceNumeric
	}
	return 0
}

func (x *TaxSubTotalD) GetTransactionCurrencyTaxAmount() float64 {
	if x != nil {
		return x.TransactionCurrencyTaxAmount
	}
	return 0
}

func (x *TaxSubTotalD) GetPercent() float32 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *TaxSubTotalD) GetBaseUnitMeasure() string {
	if x != nil {
		return x.BaseUnitMeasure
	}
	return ""
}

func (x *TaxSubTotalD) GetPerUnitAmount() float64 {
	if x != nil {
		return x.PerUnitAmount
	}
	return 0
}

func (x *TaxSubTotalD) GetTierRange() string {
	if x != nil {
		return x.TierRange
	}
	return ""
}

func (x *TaxSubTotalD) GetTierRatePercent() float64 {
	if x != nil {
		return x.TierRatePercent
	}
	return 0
}

func (x *TaxSubTotalD) GetTaxCategoryId() uint32 {
	if x != nil {
		return x.TaxCategoryId
	}
	return 0
}

func (x *TaxSubTotalD) GetTaxTotalId() uint32 {
	if x != nil {
		return x.TaxTotalId
	}
	return 0
}

type CreateTaxSubTotalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaxableAmount                float64 `protobuf:"fixed64,1,opt,name=taxable_amount,json=taxableAmount,proto3" json:"taxable_amount,omitempty"`
	TaxAmount                    float64 `protobuf:"fixed64,2,opt,name=tax_amount,json=taxAmount,proto3" json:"tax_amount,omitempty"`
	CalculationSequenceNumeric   uint32  `protobuf:"varint,3,opt,name=calculation_sequence_numeric,json=calculationSequenceNumeric,proto3" json:"calculation_sequence_numeric,omitempty"`
	TransactionCurrencyTaxAmount float64 `protobuf:"fixed64,4,opt,name=transaction_currency_tax_amount,json=transactionCurrencyTaxAmount,proto3" json:"transaction_currency_tax_amount,omitempty"`
	Percent                      float32 `protobuf:"fixed32,5,opt,name=percent,proto3" json:"percent,omitempty"`
	BaseUnitMeasure              string  `protobuf:"bytes,6,opt,name=base_unit_measure,json=baseUnitMeasure,proto3" json:"base_unit_measure,omitempty"`
	PerUnitAmount                float64 `protobuf:"fixed64,7,opt,name=per_unit_amount,json=perUnitAmount,proto3" json:"per_unit_amount,omitempty"`
	TierRange                    string  `protobuf:"bytes,8,opt,name=tier_range,json=tierRange,proto3" json:"tier_range,omitempty"`
	TierRatePercent              float64 `protobuf:"fixed64,9,opt,name=tier_rate_percent,json=tierRatePercent,proto3" json:"tier_rate_percent,omitempty"`
	TaxCategoryId                uint32  `protobuf:"varint,10,opt,name=tax_category_id,json=taxCategoryId,proto3" json:"tax_category_id,omitempty"`
	TaxTotalId                   uint32  `protobuf:"varint,11,opt,name=tax_total_id,json=taxTotalId,proto3" json:"tax_total_id,omitempty"`
	UserId                       string  `protobuf:"bytes,12,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                    string  `protobuf:"bytes,13,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                    string  `protobuf:"bytes,14,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateTaxSubTotalRequest) Reset() {
	*x = CreateTaxSubTotalRequest{}
	mi := &file_tax_v1_tax_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTaxSubTotalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaxSubTotalRequest) ProtoMessage() {}

func (x *CreateTaxSubTotalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tax_v1_tax_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaxSubTotalRequest.ProtoReflect.Descriptor instead.
func (*CreateTaxSubTotalRequest) Descriptor() ([]byte, []int) {
	return file_tax_v1_tax_proto_rawDescGZIP(), []int{24}
}

func (x *CreateTaxSubTotalRequest) GetTaxableAmount() float64 {
	if x != nil {
		return x.TaxableAmount
	}
	return 0
}

func (x *CreateTaxSubTotalRequest) GetTaxAmount() float64 {
	if x != nil {
		return x.TaxAmount
	}
	return 0
}

func (x *CreateTaxSubTotalRequest) GetCalculationSequenceNumeric() uint32 {
	if x != nil {
		return x.CalculationSequenceNumeric
	}
	return 0
}

func (x *CreateTaxSubTotalRequest) GetTransactionCurrencyTaxAmount() float64 {
	if x != nil {
		return x.TransactionCurrencyTaxAmount
	}
	return 0
}

func (x *CreateTaxSubTotalRequest) GetPercent() float32 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *CreateTaxSubTotalRequest) GetBaseUnitMeasure() string {
	if x != nil {
		return x.BaseUnitMeasure
	}
	return ""
}

func (x *CreateTaxSubTotalRequest) GetPerUnitAmount() float64 {
	if x != nil {
		return x.PerUnitAmount
	}
	return 0
}

func (x *CreateTaxSubTotalRequest) GetTierRange() string {
	if x != nil {
		return x.TierRange
	}
	return ""
}

func (x *CreateTaxSubTotalRequest) GetTierRatePercent() float64 {
	if x != nil {
		return x.TierRatePercent
	}
	return 0
}

func (x *CreateTaxSubTotalRequest) GetTaxCategoryId() uint32 {
	if x != nil {
		return x.TaxCategoryId
	}
	return 0
}

func (x *CreateTaxSubTotalRequest) GetTaxTotalId() uint32 {
	if x != nil {
		return x.TaxTotalId
	}
	return 0
}

func (x *CreateTaxSubTotalRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateTaxSubTotalRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateTaxSubTotalRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateTaxSubTotalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaxSubTotal *TaxSubTotal `protobuf:"bytes,1,opt,name=tax_sub_total,json=taxSubTotal,proto3" json:"tax_sub_total,omitempty"`
}

func (x *CreateTaxSubTotalResponse) Reset() {
	*x = CreateTaxSubTotalResponse{}
	mi := &file_tax_v1_tax_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTaxSubTotalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaxSubTotalResponse) ProtoMessage() {}

func (x *CreateTaxSubTotalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tax_v1_tax_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaxSubTotalResponse.ProtoReflect.Descriptor instead.
func (*CreateTaxSubTotalResponse) Descriptor() ([]byte, []int) {
	return file_tax_v1_tax_proto_rawDescGZIP(), []int{25}
}

func (x *CreateTaxSubTotalResponse) GetTaxSubTotal() *TaxSubTotal {
	if x != nil {
		return x.TaxSubTotal
	}
	return nil
}

type UpdateTaxSubTotalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaxableAmount                float64 `protobuf:"fixed64,1,opt,name=taxable_amount,json=taxableAmount,proto3" json:"taxable_amount,omitempty"`
	TaxAmount                    float64 `protobuf:"fixed64,2,opt,name=tax_amount,json=taxAmount,proto3" json:"tax_amount,omitempty"`
	CalculationSequenceNumeric   uint32  `protobuf:"varint,3,opt,name=calculation_sequence_numeric,json=calculationSequenceNumeric,proto3" json:"calculation_sequence_numeric,omitempty"`
	TransactionCurrencyTaxAmount float64 `protobuf:"fixed64,4,opt,name=transaction_currency_tax_amount,json=transactionCurrencyTaxAmount,proto3" json:"transaction_currency_tax_amount,omitempty"`
	Percent                      float32 `protobuf:"fixed32,5,opt,name=percent,proto3" json:"percent,omitempty"`
	BaseUnitMeasure              string  `protobuf:"bytes,6,opt,name=base_unit_measure,json=baseUnitMeasure,proto3" json:"base_unit_measure,omitempty"`
	PerUnitAmount                float64 `protobuf:"fixed64,7,opt,name=per_unit_amount,json=perUnitAmount,proto3" json:"per_unit_amount,omitempty"`
	Id                           string  `protobuf:"bytes,8,opt,name=id,proto3" json:"id,omitempty"`
	UserId                       string  `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                    string  `protobuf:"bytes,10,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                    string  `protobuf:"bytes,11,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UpdateTaxSubTotalRequest) Reset() {
	*x = UpdateTaxSubTotalRequest{}
	mi := &file_tax_v1_tax_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTaxSubTotalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaxSubTotalRequest) ProtoMessage() {}

func (x *UpdateTaxSubTotalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tax_v1_tax_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaxSubTotalRequest.ProtoReflect.Descriptor instead.
func (*UpdateTaxSubTotalRequest) Descriptor() ([]byte, []int) {
	return file_tax_v1_tax_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateTaxSubTotalRequest) GetTaxableAmount() float64 {
	if x != nil {
		return x.TaxableAmount
	}
	return 0
}

func (x *UpdateTaxSubTotalRequest) GetTaxAmount() float64 {
	if x != nil {
		return x.TaxAmount
	}
	return 0
}

func (x *UpdateTaxSubTotalRequest) GetCalculationSequenceNumeric() uint32 {
	if x != nil {
		return x.CalculationSequenceNumeric
	}
	return 0
}

func (x *UpdateTaxSubTotalRequest) GetTransactionCurrencyTaxAmount() float64 {
	if x != nil {
		return x.TransactionCurrencyTaxAmount
	}
	return 0
}

func (x *UpdateTaxSubTotalRequest) GetPercent() float32 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *UpdateTaxSubTotalRequest) GetBaseUnitMeasure() string {
	if x != nil {
		return x.BaseUnitMeasure
	}
	return ""
}

func (x *UpdateTaxSubTotalRequest) GetPerUnitAmount() float64 {
	if x != nil {
		return x.PerUnitAmount
	}
	return 0
}

func (x *UpdateTaxSubTotalRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateTaxSubTotalRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateTaxSubTotalRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *UpdateTaxSubTotalRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdateTaxSubTotalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateTaxSubTotalResponse) Reset() {
	*x = UpdateTaxSubTotalResponse{}
	mi := &file_tax_v1_tax_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTaxSubTotalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaxSubTotalResponse) ProtoMessage() {}

func (x *UpdateTaxSubTotalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tax_v1_tax_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaxSubTotalResponse.ProtoReflect.Descriptor instead.
func (*UpdateTaxSubTotalResponse) Descriptor() ([]byte, []int) {
	return file_tax_v1_tax_proto_rawDescGZIP(), []int{27}
}

type TaxTotal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaxTotalD *TaxTotalD    `protobuf:"bytes,1,opt,name=tax_total_d,json=taxTotalD,proto3" json:"tax_total_d,omitempty"`
	CrUpdUser *v1.CrUpdUser `protobuf:"bytes,2,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime *v1.CrUpdTime `protobuf:"bytes,3,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *TaxTotal) Reset() {
	*x = TaxTotal{}
	mi := &file_tax_v1_tax_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxTotal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxTotal) ProtoMessage() {}

func (x *TaxTotal) ProtoReflect() protoreflect.Message {
	mi := &file_tax_v1_tax_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxTotal.ProtoReflect.Descriptor instead.
func (*TaxTotal) Descriptor() ([]byte, []int) {
	return file_tax_v1_tax_proto_rawDescGZIP(), []int{28}
}

func (x *TaxTotal) GetTaxTotalD() *TaxTotalD {
	if x != nil {
		return x.TaxTotalD
	}
	return nil
}

func (x *TaxTotal) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *TaxTotal) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type TaxTotalD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                  string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	TaxAmount            float64 `protobuf:"fixed64,4,opt,name=tax_amount,json=taxAmount,proto3" json:"tax_amount,omitempty"`
	RoundingAmount       float64 `protobuf:"fixed64,5,opt,name=rounding_amount,json=roundingAmount,proto3" json:"rounding_amount,omitempty"`
	TaxEvidenceIndicator bool    `protobuf:"varint,6,opt,name=tax_evidence_indicator,json=taxEvidenceIndicator,proto3" json:"tax_evidence_indicator,omitempty"`
	TaxIncludedIndicator bool    `protobuf:"varint,7,opt,name=tax_included_indicator,json=taxIncludedIndicator,proto3" json:"tax_included_indicator,omitempty"`
	TaxCategoryId        uint32  `protobuf:"varint,8,opt,name=tax_category_id,json=taxCategoryId,proto3" json:"tax_category_id,omitempty"`
	MasterFlag           string  `protobuf:"bytes,9,opt,name=master_flag,json=masterFlag,proto3" json:"master_flag,omitempty"`
	MasterId             uint32  `protobuf:"varint,10,opt,name=master_id,json=masterId,proto3" json:"master_id,omitempty"`
}

func (x *TaxTotalD) Reset() {
	*x = TaxTotalD{}
	mi := &file_tax_v1_tax_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxTotalD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxTotalD) ProtoMessage() {}

func (x *TaxTotalD) ProtoReflect() protoreflect.Message {
	mi := &file_tax_v1_tax_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxTotalD.ProtoReflect.Descriptor instead.
func (*TaxTotalD) Descriptor() ([]byte, []int) {
	return file_tax_v1_tax_proto_rawDescGZIP(), []int{29}
}

func (x *TaxTotalD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaxTotalD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *TaxTotalD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *TaxTotalD) GetTaxAmount() float64 {
	if x != nil {
		return x.TaxAmount
	}
	return 0
}

func (x *TaxTotalD) GetRoundingAmount() float64 {
	if x != nil {
		return x.RoundingAmount
	}
	return 0
}

func (x *TaxTotalD) GetTaxEvidenceIndicator() bool {
	if x != nil {
		return x.TaxEvidenceIndicator
	}
	return false
}

func (x *TaxTotalD) GetTaxIncludedIndicator() bool {
	if x != nil {
		return x.TaxIncludedIndicator
	}
	return false
}

func (x *TaxTotalD) GetTaxCategoryId() uint32 {
	if x != nil {
		return x.TaxCategoryId
	}
	return 0
}

func (x *TaxTotalD) GetMasterFlag() string {
	if x != nil {
		return x.MasterFlag
	}
	return ""
}

func (x *TaxTotalD) GetMasterId() uint32 {
	if x != nil {
		return x.MasterId
	}
	return 0
}

type CreateTaxTotalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaxAmount            float64 `protobuf:"fixed64,1,opt,name=tax_amount,json=taxAmount,proto3" json:"tax_amount,omitempty"`
	RoundingAmount       float64 `protobuf:"fixed64,2,opt,name=rounding_amount,json=roundingAmount,proto3" json:"rounding_amount,omitempty"`
	TaxEvidenceIndicator bool    `protobuf:"varint,3,opt,name=tax_evidence_indicator,json=taxEvidenceIndicator,proto3" json:"tax_evidence_indicator,omitempty"`
	TaxIncludedIndicator bool    `protobuf:"varint,4,opt,name=tax_included_indicator,json=taxIncludedIndicator,proto3" json:"tax_included_indicator,omitempty"`
	MasterFlag           string  `protobuf:"bytes,5,opt,name=master_flag,json=masterFlag,proto3" json:"master_flag,omitempty"`
	MasterId             uint32  `protobuf:"varint,6,opt,name=master_id,json=masterId,proto3" json:"master_id,omitempty"`
	TaxCategoryId        uint32  `protobuf:"varint,7,opt,name=tax_category_id,json=taxCategoryId,proto3" json:"tax_category_id,omitempty"`
	UserId               string  `protobuf:"bytes,8,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail            string  `protobuf:"bytes,9,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId            string  `protobuf:"bytes,10,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateTaxTotalRequest) Reset() {
	*x = CreateTaxTotalRequest{}
	mi := &file_tax_v1_tax_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTaxTotalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaxTotalRequest) ProtoMessage() {}

func (x *CreateTaxTotalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tax_v1_tax_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaxTotalRequest.ProtoReflect.Descriptor instead.
func (*CreateTaxTotalRequest) Descriptor() ([]byte, []int) {
	return file_tax_v1_tax_proto_rawDescGZIP(), []int{30}
}

func (x *CreateTaxTotalRequest) GetTaxAmount() float64 {
	if x != nil {
		return x.TaxAmount
	}
	return 0
}

func (x *CreateTaxTotalRequest) GetRoundingAmount() float64 {
	if x != nil {
		return x.RoundingAmount
	}
	return 0
}

func (x *CreateTaxTotalRequest) GetTaxEvidenceIndicator() bool {
	if x != nil {
		return x.TaxEvidenceIndicator
	}
	return false
}

func (x *CreateTaxTotalRequest) GetTaxIncludedIndicator() bool {
	if x != nil {
		return x.TaxIncludedIndicator
	}
	return false
}

func (x *CreateTaxTotalRequest) GetMasterFlag() string {
	if x != nil {
		return x.MasterFlag
	}
	return ""
}

func (x *CreateTaxTotalRequest) GetMasterId() uint32 {
	if x != nil {
		return x.MasterId
	}
	return 0
}

func (x *CreateTaxTotalRequest) GetTaxCategoryId() uint32 {
	if x != nil {
		return x.TaxCategoryId
	}
	return 0
}

func (x *CreateTaxTotalRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateTaxTotalRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateTaxTotalRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateTaxTotalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaxTotal *TaxTotal `protobuf:"bytes,1,opt,name=tax_total,json=taxTotal,proto3" json:"tax_total,omitempty"`
}

func (x *CreateTaxTotalResponse) Reset() {
	*x = CreateTaxTotalResponse{}
	mi := &file_tax_v1_tax_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTaxTotalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaxTotalResponse) ProtoMessage() {}

func (x *CreateTaxTotalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tax_v1_tax_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaxTotalResponse.ProtoReflect.Descriptor instead.
func (*CreateTaxTotalResponse) Descriptor() ([]byte, []int) {
	return file_tax_v1_tax_proto_rawDescGZIP(), []int{31}
}

func (x *CreateTaxTotalResponse) GetTaxTotal() *TaxTotal {
	if x != nil {
		return x.TaxTotal
	}
	return nil
}

type UpdateTaxTotalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaxAmount      float64 `protobuf:"fixed64,1,opt,name=tax_amount,json=taxAmount,proto3" json:"tax_amount,omitempty"`
	RoundingAmount float64 `protobuf:"fixed64,2,opt,name=rounding_amount,json=roundingAmount,proto3" json:"rounding_amount,omitempty"`
	Id             string  `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	UserId         string  `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail      string  `protobuf:"bytes,5,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId      string  `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UpdateTaxTotalRequest) Reset() {
	*x = UpdateTaxTotalRequest{}
	mi := &file_tax_v1_tax_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTaxTotalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaxTotalRequest) ProtoMessage() {}

func (x *UpdateTaxTotalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tax_v1_tax_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaxTotalRequest.ProtoReflect.Descriptor instead.
func (*UpdateTaxTotalRequest) Descriptor() ([]byte, []int) {
	return file_tax_v1_tax_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateTaxTotalRequest) GetTaxAmount() float64 {
	if x != nil {
		return x.TaxAmount
	}
	return 0
}

func (x *UpdateTaxTotalRequest) GetRoundingAmount() float64 {
	if x != nil {
		return x.RoundingAmount
	}
	return 0
}

func (x *UpdateTaxTotalRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateTaxTotalRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateTaxTotalRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *UpdateTaxTotalRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdateTaxTotalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateTaxTotalResponse) Reset() {
	*x = UpdateTaxTotalResponse{}
	mi := &file_tax_v1_tax_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTaxTotalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaxTotalResponse) ProtoMessage() {}

func (x *UpdateTaxTotalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tax_v1_tax_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaxTotalResponse.ProtoReflect.Descriptor instead.
func (*UpdateTaxTotalResponse) Descriptor() ([]byte, []int) {
	return file_tax_v1_tax_proto_rawDescGZIP(), []int{33}
}

var File_tax_v1_tax_proto protoreflect.FileDescriptor

var file_tax_v1_tax_proto_rawDesc = []byte{
	0x0a, 0x10, 0x74, 0x61, 0x78, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x78, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x74, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x6c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x74, 0x61, 0x78, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x74, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x52, 0x0a, 0x74, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x8b, 0x01,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a,
	0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x48, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x74, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x61, 0x78, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x0b, 0x54, 0x61, 0x78, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x0e, 0x74, 0x61, 0x78, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74,
	0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x78, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x44, 0x52, 0x0c, 0x74, 0x61, 0x78, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44,
	0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55,
	0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd2, 0x03, 0x0a,
	0x0c, 0x54, 0x61, 0x78, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75,
	0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x63, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x61, 0x78, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x78, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61,
	0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x65,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x74, 0x61, 0x78, 0x45, 0x78, 0x65,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x74, 0x61, 0x78, 0x45, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x74, 0x69,
	0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0d, 0x74, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49,
	0x64, 0x22, 0xfc, 0x03, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13,
	0x0a, 0x05, 0x74, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x63, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x78, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x74, 0x61, 0x78, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x70, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a,
	0x19, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x74, 0x61, 0x78, 0x45, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x61, 0x78, 0x5f,
	0x65, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x61, 0x78, 0x45, 0x78, 0x65, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69,
	0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x69, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x69, 0x65,
	0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x74, 0x69, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x61,
	0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x22, 0x53, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x0c, 0x74, 0x61, 0x78, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x78,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0b, 0x74, 0x61, 0x78, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x88, 0x03, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x78, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x78, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74,
	0x61, 0x78, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70,
	0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x19,
	0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x74, 0x61, 0x78, 0x45, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x61, 0x78, 0x5f, 0x65,
	0x78, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x61, 0x78, 0x45, 0x78, 0x65, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x22, 0x1b, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xad, 0x01,
	0x0a, 0x09, 0x54, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x74,
	0x61, 0x78, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x78, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x44, 0x52, 0x0a, 0x74, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x44, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72,
	0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xcb, 0x01,
	0x0a, 0x0a, 0x54, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x44, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69,
	0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x73, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61,
	0x78, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x61, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x78, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xfe, 0x01, 0x0a, 0x16,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x73, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0f, 0x74,
	0x61, 0x78, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x74,
	0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x74, 0x61, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x78, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xf0, 0x01, 0x0a,
	0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x78, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x74, 0x61, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x78, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22,
	0x19, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x74, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x78, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x61,
	0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x22, 0xa0, 0x02, 0x0a, 0x15, 0x54, 0x61, 0x78, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x59, 0x0a, 0x19, 0x74, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f,
	0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x52, 0x16, 0x74, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x4a,
	0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x12, 0x40, 0x0a, 0x0f,
	0x74, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0d, 0x74, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34,
	0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x70, 0x0a, 0x16, 0x54, 0x61,
	0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64,
	0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0xd2, 0x0a, 0x0a,
	0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x4a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x61, 0x64, 0x64, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x61, 0x64, 0x64, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x62, 0x6f, 0x78, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x62, 0x6f, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x69, 0x6e, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x63, 0x61, 0x72, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x65,
	0x12, 0x2f, 0x0a, 0x13, 0x70, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70,
	0x6c, 0x6f, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x64, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x63, 0x69, 0x74, 0x79, 0x53, 0x75, 0x62, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5a,
	0x6f, 0x6e, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73,
	0x75, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x75, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x75, 0x62, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64,
	0x5f, 0x6c, 0x61, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x4c, 0x61, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x6c,
	0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x74, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x78,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x22, 0x7c, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x17, 0x74, 0x61, 0x78, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x61, 0x78, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x4a, 0x75, 0x72, 0x69,
	0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x74, 0x61, 0x78, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xd7, 0x01, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x61, 0x78, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74,
	0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61,
	0x78, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x25, 0x0a, 0x23, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x4a, 0x75, 0x72, 0x69,
	0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xb6, 0x01, 0x0a, 0x0b, 0x54, 0x61, 0x78, 0x53, 0x75, 0x62, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x3b, 0x0a, 0x0f, 0x74, 0x61, 0x78, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x78, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x78, 0x53, 0x75, 0x62, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x52,
	0x0c, 0x74, 0x61, 0x78, 0x53, 0x75, 0x62, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x12, 0x34, 0x0a,
	0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09,
	0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x99, 0x04, 0x0a, 0x0c, 0x54, 0x61,
	0x78, 0x53, 0x75, 0x62, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75,
	0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34,
	0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x69, 0x64, 0x53, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x78, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x61, 0x78,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61,
	0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x74, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x1c, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1a, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x45, 0x0a, 0x1f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x74, 0x69, 0x65, 0x72,
	0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74,
	0x61, 0x78, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x61, 0x78, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x61, 0x78, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x49, 0x64, 0x22, 0xc3, 0x04, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x78, 0x53, 0x75, 0x62, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x78, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x61, 0x78, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x78,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74,
	0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x1c, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a,
	0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x45, 0x0a, 0x1f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x70, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x74, 0x69, 0x65, 0x72, 0x52,
	0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61,
	0x78, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x61, 0x78, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x61, 0x78, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x19, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x53, 0x75, 0x62, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x74, 0x61, 0x78, 0x5f,
	0x73, 0x75, 0x62, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x78, 0x53, 0x75, 0x62, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x0b, 0x74, 0x61, 0x78, 0x53, 0x75, 0x62, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0xbe, 0x03, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x53,
	0x75, 0x62, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x61, 0x78, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x61, 0x78, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x61, 0x78, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x1c, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x45, 0x0a, 0x1f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74,
	0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x54, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x65,
	0x72, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x53,
	0x75, 0x62, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xa9, 0x01, 0x0a, 0x08, 0x54, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x0b,
	0x74, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x78, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x44, 0x52, 0x09, 0x74, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x12,
	0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xde, 0x02, 0x0a, 0x09,
	0x54, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69,
	0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12,
	0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69,
	0x64, 0x53, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x61,
	0x78, 0x5f, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x74, 0x61, 0x78, 0x45,
	0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x34, 0x0a, 0x16, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x74, 0x61, 0x78, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x78, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x74, 0x61, 0x78, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x88, 0x03, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x61, 0x78, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34,
	0x0a, 0x16, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x74, 0x61, 0x78, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x74, 0x61, 0x78, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x78, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x74, 0x61, 0x78, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2d, 0x0a, 0x09, 0x74, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x08, 0x74, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0xc6, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61,
	0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x74, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0xc7, 0x08, 0x0a, 0x0a, 0x54, 0x61, 0x78, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x49, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x12, 0x1b, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x78,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x74, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x78, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x20, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x78, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x78, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x78, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x2e, 0x74, 0x61, 0x78,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74,
	0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x52, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x12, 0x1e, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x1e, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x4a,
	0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x4a, 0x75, 0x72, 0x69, 0x73,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x76, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a,
	0x2e, 0x74, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x78, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x74, 0x61, 0x78,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d, 0x2e, 0x74, 0x61, 0x78, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d, 0x2e, 0x74, 0x61, 0x78,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x74, 0x61, 0x78, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x53, 0x75, 0x62, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20,
	0x2e, 0x74, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x78, 0x53, 0x75, 0x62, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x78, 0x53, 0x75, 0x62, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78,
	0x53, 0x75, 0x62, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x2e, 0x74, 0x61, 0x78, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x53, 0x75, 0x62, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x61, 0x78,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x53, 0x75, 0x62,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x31, 0x5a,
	0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x76,
	0x31, 0x30, 0x30, 0x2f, 0x64, 0x63, 0x32, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x74, 0x61, 0x78, 0x2f, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tax_v1_tax_proto_rawDescOnce sync.Once
	file_tax_v1_tax_proto_rawDescData = file_tax_v1_tax_proto_rawDesc
)

func file_tax_v1_tax_proto_rawDescGZIP() []byte {
	file_tax_v1_tax_proto_rawDescOnce.Do(func() {
		file_tax_v1_tax_proto_rawDescData = protoimpl.X.CompressGZIP(file_tax_v1_tax_proto_rawDescData)
	})
	return file_tax_v1_tax_proto_rawDescData
}

var file_tax_v1_tax_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_tax_v1_tax_proto_goTypes = []any{
	(*GetTaxSchemesResponse)(nil),               // 0: tax.v1.GetTaxSchemesResponse
	(*GetTaxSchemesRequest)(nil),                // 1: tax.v1.GetTaxSchemesRequest
	(*GetTaxSchemeRequest)(nil),                 // 2: tax.v1.GetTaxSchemeRequest
	(*GetTaxSchemeResponse)(nil),                // 3: tax.v1.GetTaxSchemeResponse
	(*TaxCategory)(nil),                         // 4: tax.v1.TaxCategory
	(*TaxCategoryD)(nil),                        // 5: tax.v1.TaxCategoryD
	(*CreateTaxCategoryRequest)(nil),            // 6: tax.v1.CreateTaxCategoryRequest
	(*CreateTaxCategoryResponse)(nil),           // 7: tax.v1.CreateTaxCategoryResponse
	(*UpdateTaxCategoryRequest)(nil),            // 8: tax.v1.UpdateTaxCategoryRequest
	(*UpdateTaxCategoryResponse)(nil),           // 9: tax.v1.UpdateTaxCategoryResponse
	(*TaxScheme)(nil),                           // 10: tax.v1.TaxScheme
	(*TaxSchemeD)(nil),                          // 11: tax.v1.TaxSchemeD
	(*CreateTaxSchemeRequest)(nil),              // 12: tax.v1.CreateTaxSchemeRequest
	(*UpdateTaxSchemeRequest)(nil),              // 13: tax.v1.UpdateTaxSchemeRequest
	(*UpdateTaxSchemeResponse)(nil),             // 14: tax.v1.UpdateTaxSchemeResponse
	(*CreateTaxSchemeResponse)(nil),             // 15: tax.v1.CreateTaxSchemeResponse
	(*TaxSchemeJurisdiction)(nil),               // 16: tax.v1.TaxSchemeJurisdiction
	(*TaxSchemeJurisdictionD)(nil),              // 17: tax.v1.TaxSchemeJurisdictionD
	(*CreateTaxSchemeJurisdictionRequest)(nil),  // 18: tax.v1.CreateTaxSchemeJurisdictionRequest
	(*CreateTaxSchemeJurisdictionResponse)(nil), // 19: tax.v1.CreateTaxSchemeJurisdictionResponse
	(*UpdateTaxSchemeJurisdictionRequest)(nil),  // 20: tax.v1.UpdateTaxSchemeJurisdictionRequest
	(*UpdateTaxSchemeJurisdictionResponse)(nil), // 21: tax.v1.UpdateTaxSchemeJurisdictionResponse
	(*TaxSubTotal)(nil),                         // 22: tax.v1.TaxSubTotal
	(*TaxSubTotalD)(nil),                        // 23: tax.v1.TaxSubTotalD
	(*CreateTaxSubTotalRequest)(nil),            // 24: tax.v1.CreateTaxSubTotalRequest
	(*CreateTaxSubTotalResponse)(nil),           // 25: tax.v1.CreateTaxSubTotalResponse
	(*UpdateTaxSubTotalRequest)(nil),            // 26: tax.v1.UpdateTaxSubTotalRequest
	(*UpdateTaxSubTotalResponse)(nil),           // 27: tax.v1.UpdateTaxSubTotalResponse
	(*TaxTotal)(nil),                            // 28: tax.v1.TaxTotal
	(*TaxTotalD)(nil),                           // 29: tax.v1.TaxTotalD
	(*CreateTaxTotalRequest)(nil),               // 30: tax.v1.CreateTaxTotalRequest
	(*CreateTaxTotalResponse)(nil),              // 31: tax.v1.CreateTaxTotalResponse
	(*UpdateTaxTotalRequest)(nil),               // 32: tax.v1.UpdateTaxTotalRequest
	(*UpdateTaxTotalResponse)(nil),              // 33: tax.v1.UpdateTaxTotalResponse
	(*v1.GetRequest)(nil),                       // 34: common.v1.GetRequest
	(*v1.CrUpdUser)(nil),                        // 35: common.v1.CrUpdUser
	(*v1.CrUpdTime)(nil),                        // 36: common.v1.CrUpdTime
	(*v1.TaxSchemeInfo)(nil),                    // 37: common.v1.TaxSchemeInfo
}
var file_tax_v1_tax_proto_depIdxs = []int32{
	10, // 0: tax.v1.GetTaxSchemesResponse.tax_schemes:type_name -> tax.v1.TaxScheme
	34, // 1: tax.v1.GetTaxSchemeRequest.get_request:type_name -> common.v1.GetRequest
	10, // 2: tax.v1.GetTaxSchemeResponse.tax_scheme:type_name -> tax.v1.TaxScheme
	5,  // 3: tax.v1.TaxCategory.tax_category_d:type_name -> tax.v1.TaxCategoryD
	35, // 4: tax.v1.TaxCategory.cr_upd_user:type_name -> common.v1.CrUpdUser
	36, // 5: tax.v1.TaxCategory.cr_upd_time:type_name -> common.v1.CrUpdTime
	4,  // 6: tax.v1.CreateTaxCategoryResponse.tax_category:type_name -> tax.v1.TaxCategory
	11, // 7: tax.v1.TaxScheme.tax_scheme_d:type_name -> tax.v1.TaxSchemeD
	35, // 8: tax.v1.TaxScheme.cr_upd_user:type_name -> common.v1.CrUpdUser
	36, // 9: tax.v1.TaxScheme.cr_upd_time:type_name -> common.v1.CrUpdTime
	10, // 10: tax.v1.CreateTaxSchemeResponse.tax_scheme:type_name -> tax.v1.TaxScheme
	17, // 11: tax.v1.TaxSchemeJurisdiction.tax_scheme_jurisdiction_d:type_name -> tax.v1.TaxSchemeJurisdictionD
	37, // 12: tax.v1.TaxSchemeJurisdiction.tax_scheme_info:type_name -> common.v1.TaxSchemeInfo
	35, // 13: tax.v1.TaxSchemeJurisdiction.cr_upd_user:type_name -> common.v1.CrUpdUser
	36, // 14: tax.v1.TaxSchemeJurisdiction.cr_upd_time:type_name -> common.v1.CrUpdTime
	16, // 15: tax.v1.CreateTaxSchemeJurisdictionResponse.tax_scheme_jurisdiction:type_name -> tax.v1.TaxSchemeJurisdiction
	23, // 16: tax.v1.TaxSubTotal.tax_sub_total_d:type_name -> tax.v1.TaxSubTotalD
	35, // 17: tax.v1.TaxSubTotal.cr_upd_user:type_name -> common.v1.CrUpdUser
	36, // 18: tax.v1.TaxSubTotal.cr_upd_time:type_name -> common.v1.CrUpdTime
	22, // 19: tax.v1.CreateTaxSubTotalResponse.tax_sub_total:type_name -> tax.v1.TaxSubTotal
	29, // 20: tax.v1.TaxTotal.tax_total_d:type_name -> tax.v1.TaxTotalD
	35, // 21: tax.v1.TaxTotal.cr_upd_user:type_name -> common.v1.CrUpdUser
	36, // 22: tax.v1.TaxTotal.cr_upd_time:type_name -> common.v1.CrUpdTime
	28, // 23: tax.v1.CreateTaxTotalResponse.tax_total:type_name -> tax.v1.TaxTotal
	1,  // 24: tax.v1.TaxService.GetTaxSchemes:input_type -> tax.v1.GetTaxSchemesRequest
	2,  // 25: tax.v1.TaxService.GetTaxScheme:input_type -> tax.v1.GetTaxSchemeRequest
	6,  // 26: tax.v1.TaxService.CreateTaxCategory:input_type -> tax.v1.CreateTaxCategoryRequest
	8,  // 27: tax.v1.TaxService.UpdateTaxCategory:input_type -> tax.v1.UpdateTaxCategoryRequest
	12, // 28: tax.v1.TaxService.CreateTaxScheme:input_type -> tax.v1.CreateTaxSchemeRequest
	13, // 29: tax.v1.TaxService.UpdateTaxScheme:input_type -> tax.v1.UpdateTaxSchemeRequest
	18, // 30: tax.v1.TaxService.CreateTaxSchemeJurisdiction:input_type -> tax.v1.CreateTaxSchemeJurisdictionRequest
	20, // 31: tax.v1.TaxService.UpdateTaxSchemeJurisdiction:input_type -> tax.v1.UpdateTaxSchemeJurisdictionRequest
	30, // 32: tax.v1.TaxService.CreateTaxTotal:input_type -> tax.v1.CreateTaxTotalRequest
	32, // 33: tax.v1.TaxService.UpdateTaxTotal:input_type -> tax.v1.UpdateTaxTotalRequest
	24, // 34: tax.v1.TaxService.CreateTaxSubTotal:input_type -> tax.v1.CreateTaxSubTotalRequest
	26, // 35: tax.v1.TaxService.UpdateTaxSubTotal:input_type -> tax.v1.UpdateTaxSubTotalRequest
	0,  // 36: tax.v1.TaxService.GetTaxSchemes:output_type -> tax.v1.GetTaxSchemesResponse
	3,  // 37: tax.v1.TaxService.GetTaxScheme:output_type -> tax.v1.GetTaxSchemeResponse
	7,  // 38: tax.v1.TaxService.CreateTaxCategory:output_type -> tax.v1.CreateTaxCategoryResponse
	9,  // 39: tax.v1.TaxService.UpdateTaxCategory:output_type -> tax.v1.UpdateTaxCategoryResponse
	15, // 40: tax.v1.TaxService.CreateTaxScheme:output_type -> tax.v1.CreateTaxSchemeResponse
	14, // 41: tax.v1.TaxService.UpdateTaxScheme:output_type -> tax.v1.UpdateTaxSchemeResponse
	19, // 42: tax.v1.TaxService.CreateTaxSchemeJurisdiction:output_type -> tax.v1.CreateTaxSchemeJurisdictionResponse
	21, // 43: tax.v1.TaxService.UpdateTaxSchemeJurisdiction:output_type -> tax.v1.UpdateTaxSchemeJurisdictionResponse
	31, // 44: tax.v1.TaxService.CreateTaxTotal:output_type -> tax.v1.CreateTaxTotalResponse
	33, // 45: tax.v1.TaxService.UpdateTaxTotal:output_type -> tax.v1.UpdateTaxTotalResponse
	25, // 46: tax.v1.TaxService.CreateTaxSubTotal:output_type -> tax.v1.CreateTaxSubTotalResponse
	27, // 47: tax.v1.TaxService.UpdateTaxSubTotal:output_type -> tax.v1.UpdateTaxSubTotalResponse
	36, // [36:48] is the sub-list for method output_type
	24, // [24:36] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_tax_v1_tax_proto_init() }
func file_tax_v1_tax_proto_init() {
	if File_tax_v1_tax_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tax_v1_tax_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tax_v1_tax_proto_goTypes,
		DependencyIndexes: file_tax_v1_tax_proto_depIdxs,
		MessageInfos:      file_tax_v1_tax_proto_msgTypes,
	}.Build()
	File_tax_v1_tax_proto = out.File
	file_tax_v1_tax_proto_rawDesc = nil
	file_tax_v1_tax_proto_goTypes = nil
	file_tax_v1_tax_proto_depIdxs = nil
}
