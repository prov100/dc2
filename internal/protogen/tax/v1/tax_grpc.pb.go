// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: tax/v1/tax.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaxService_GetTaxSchemes_FullMethodName               = "/tax.v1.TaxService/GetTaxSchemes"
	TaxService_GetTaxScheme_FullMethodName                = "/tax.v1.TaxService/GetTaxScheme"
	TaxService_CreateTaxCategory_FullMethodName           = "/tax.v1.TaxService/CreateTaxCategory"
	TaxService_UpdateTaxCategory_FullMethodName           = "/tax.v1.TaxService/UpdateTaxCategory"
	TaxService_CreateTaxScheme_FullMethodName             = "/tax.v1.TaxService/CreateTaxScheme"
	TaxService_UpdateTaxScheme_FullMethodName             = "/tax.v1.TaxService/UpdateTaxScheme"
	TaxService_CreateTaxSchemeJurisdiction_FullMethodName = "/tax.v1.TaxService/CreateTaxSchemeJurisdiction"
	TaxService_UpdateTaxSchemeJurisdiction_FullMethodName = "/tax.v1.TaxService/UpdateTaxSchemeJurisdiction"
	TaxService_CreateTaxTotal_FullMethodName              = "/tax.v1.TaxService/CreateTaxTotal"
	TaxService_UpdateTaxTotal_FullMethodName              = "/tax.v1.TaxService/UpdateTaxTotal"
	TaxService_CreateTaxSubTotal_FullMethodName           = "/tax.v1.TaxService/CreateTaxSubTotal"
	TaxService_UpdateTaxSubTotal_FullMethodName           = "/tax.v1.TaxService/UpdateTaxSubTotal"
)

// TaxServiceClient is the client API for TaxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The TaxService service definition.
type TaxServiceClient interface {
	GetTaxSchemes(ctx context.Context, in *GetTaxSchemesRequest, opts ...grpc.CallOption) (*GetTaxSchemesResponse, error)
	GetTaxScheme(ctx context.Context, in *GetTaxSchemeRequest, opts ...grpc.CallOption) (*GetTaxSchemeResponse, error)
	CreateTaxCategory(ctx context.Context, in *CreateTaxCategoryRequest, opts ...grpc.CallOption) (*CreateTaxCategoryResponse, error)
	UpdateTaxCategory(ctx context.Context, in *UpdateTaxCategoryRequest, opts ...grpc.CallOption) (*UpdateTaxCategoryResponse, error)
	CreateTaxScheme(ctx context.Context, in *CreateTaxSchemeRequest, opts ...grpc.CallOption) (*CreateTaxSchemeResponse, error)
	UpdateTaxScheme(ctx context.Context, in *UpdateTaxSchemeRequest, opts ...grpc.CallOption) (*UpdateTaxSchemeResponse, error)
	CreateTaxSchemeJurisdiction(ctx context.Context, in *CreateTaxSchemeJurisdictionRequest, opts ...grpc.CallOption) (*CreateTaxSchemeJurisdictionResponse, error)
	UpdateTaxSchemeJurisdiction(ctx context.Context, in *UpdateTaxSchemeJurisdictionRequest, opts ...grpc.CallOption) (*UpdateTaxSchemeJurisdictionResponse, error)
	CreateTaxTotal(ctx context.Context, in *CreateTaxTotalRequest, opts ...grpc.CallOption) (*CreateTaxTotalResponse, error)
	UpdateTaxTotal(ctx context.Context, in *UpdateTaxTotalRequest, opts ...grpc.CallOption) (*UpdateTaxTotalResponse, error)
	CreateTaxSubTotal(ctx context.Context, in *CreateTaxSubTotalRequest, opts ...grpc.CallOption) (*CreateTaxSubTotalResponse, error)
	UpdateTaxSubTotal(ctx context.Context, in *UpdateTaxSubTotalRequest, opts ...grpc.CallOption) (*UpdateTaxSubTotalResponse, error)
}

type taxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaxServiceClient(cc grpc.ClientConnInterface) TaxServiceClient {
	return &taxServiceClient{cc}
}

func (c *taxServiceClient) GetTaxSchemes(ctx context.Context, in *GetTaxSchemesRequest, opts ...grpc.CallOption) (*GetTaxSchemesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaxSchemesResponse)
	err := c.cc.Invoke(ctx, TaxService_GetTaxSchemes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxServiceClient) GetTaxScheme(ctx context.Context, in *GetTaxSchemeRequest, opts ...grpc.CallOption) (*GetTaxSchemeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaxSchemeResponse)
	err := c.cc.Invoke(ctx, TaxService_GetTaxScheme_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxServiceClient) CreateTaxCategory(ctx context.Context, in *CreateTaxCategoryRequest, opts ...grpc.CallOption) (*CreateTaxCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTaxCategoryResponse)
	err := c.cc.Invoke(ctx, TaxService_CreateTaxCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxServiceClient) UpdateTaxCategory(ctx context.Context, in *UpdateTaxCategoryRequest, opts ...grpc.CallOption) (*UpdateTaxCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTaxCategoryResponse)
	err := c.cc.Invoke(ctx, TaxService_UpdateTaxCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxServiceClient) CreateTaxScheme(ctx context.Context, in *CreateTaxSchemeRequest, opts ...grpc.CallOption) (*CreateTaxSchemeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTaxSchemeResponse)
	err := c.cc.Invoke(ctx, TaxService_CreateTaxScheme_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxServiceClient) UpdateTaxScheme(ctx context.Context, in *UpdateTaxSchemeRequest, opts ...grpc.CallOption) (*UpdateTaxSchemeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTaxSchemeResponse)
	err := c.cc.Invoke(ctx, TaxService_UpdateTaxScheme_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxServiceClient) CreateTaxSchemeJurisdiction(ctx context.Context, in *CreateTaxSchemeJurisdictionRequest, opts ...grpc.CallOption) (*CreateTaxSchemeJurisdictionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTaxSchemeJurisdictionResponse)
	err := c.cc.Invoke(ctx, TaxService_CreateTaxSchemeJurisdiction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxServiceClient) UpdateTaxSchemeJurisdiction(ctx context.Context, in *UpdateTaxSchemeJurisdictionRequest, opts ...grpc.CallOption) (*UpdateTaxSchemeJurisdictionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTaxSchemeJurisdictionResponse)
	err := c.cc.Invoke(ctx, TaxService_UpdateTaxSchemeJurisdiction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxServiceClient) CreateTaxTotal(ctx context.Context, in *CreateTaxTotalRequest, opts ...grpc.CallOption) (*CreateTaxTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTaxTotalResponse)
	err := c.cc.Invoke(ctx, TaxService_CreateTaxTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxServiceClient) UpdateTaxTotal(ctx context.Context, in *UpdateTaxTotalRequest, opts ...grpc.CallOption) (*UpdateTaxTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTaxTotalResponse)
	err := c.cc.Invoke(ctx, TaxService_UpdateTaxTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxServiceClient) CreateTaxSubTotal(ctx context.Context, in *CreateTaxSubTotalRequest, opts ...grpc.CallOption) (*CreateTaxSubTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTaxSubTotalResponse)
	err := c.cc.Invoke(ctx, TaxService_CreateTaxSubTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxServiceClient) UpdateTaxSubTotal(ctx context.Context, in *UpdateTaxSubTotalRequest, opts ...grpc.CallOption) (*UpdateTaxSubTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTaxSubTotalResponse)
	err := c.cc.Invoke(ctx, TaxService_UpdateTaxSubTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaxServiceServer is the server API for TaxService service.
// All implementations must embed UnimplementedTaxServiceServer
// for forward compatibility.
//
// The TaxService service definition.
type TaxServiceServer interface {
	GetTaxSchemes(context.Context, *GetTaxSchemesRequest) (*GetTaxSchemesResponse, error)
	GetTaxScheme(context.Context, *GetTaxSchemeRequest) (*GetTaxSchemeResponse, error)
	CreateTaxCategory(context.Context, *CreateTaxCategoryRequest) (*CreateTaxCategoryResponse, error)
	UpdateTaxCategory(context.Context, *UpdateTaxCategoryRequest) (*UpdateTaxCategoryResponse, error)
	CreateTaxScheme(context.Context, *CreateTaxSchemeRequest) (*CreateTaxSchemeResponse, error)
	UpdateTaxScheme(context.Context, *UpdateTaxSchemeRequest) (*UpdateTaxSchemeResponse, error)
	CreateTaxSchemeJurisdiction(context.Context, *CreateTaxSchemeJurisdictionRequest) (*CreateTaxSchemeJurisdictionResponse, error)
	UpdateTaxSchemeJurisdiction(context.Context, *UpdateTaxSchemeJurisdictionRequest) (*UpdateTaxSchemeJurisdictionResponse, error)
	CreateTaxTotal(context.Context, *CreateTaxTotalRequest) (*CreateTaxTotalResponse, error)
	UpdateTaxTotal(context.Context, *UpdateTaxTotalRequest) (*UpdateTaxTotalResponse, error)
	CreateTaxSubTotal(context.Context, *CreateTaxSubTotalRequest) (*CreateTaxSubTotalResponse, error)
	UpdateTaxSubTotal(context.Context, *UpdateTaxSubTotalRequest) (*UpdateTaxSubTotalResponse, error)
	mustEmbedUnimplementedTaxServiceServer()
}

// UnimplementedTaxServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaxServiceServer struct{}

func (UnimplementedTaxServiceServer) GetTaxSchemes(context.Context, *GetTaxSchemesRequest) (*GetTaxSchemesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaxSchemes not implemented")
}
func (UnimplementedTaxServiceServer) GetTaxScheme(context.Context, *GetTaxSchemeRequest) (*GetTaxSchemeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaxScheme not implemented")
}
func (UnimplementedTaxServiceServer) CreateTaxCategory(context.Context, *CreateTaxCategoryRequest) (*CreateTaxCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaxCategory not implemented")
}
func (UnimplementedTaxServiceServer) UpdateTaxCategory(context.Context, *UpdateTaxCategoryRequest) (*UpdateTaxCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaxCategory not implemented")
}
func (UnimplementedTaxServiceServer) CreateTaxScheme(context.Context, *CreateTaxSchemeRequest) (*CreateTaxSchemeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaxScheme not implemented")
}
func (UnimplementedTaxServiceServer) UpdateTaxScheme(context.Context, *UpdateTaxSchemeRequest) (*UpdateTaxSchemeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaxScheme not implemented")
}
func (UnimplementedTaxServiceServer) CreateTaxSchemeJurisdiction(context.Context, *CreateTaxSchemeJurisdictionRequest) (*CreateTaxSchemeJurisdictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaxSchemeJurisdiction not implemented")
}
func (UnimplementedTaxServiceServer) UpdateTaxSchemeJurisdiction(context.Context, *UpdateTaxSchemeJurisdictionRequest) (*UpdateTaxSchemeJurisdictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaxSchemeJurisdiction not implemented")
}
func (UnimplementedTaxServiceServer) CreateTaxTotal(context.Context, *CreateTaxTotalRequest) (*CreateTaxTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaxTotal not implemented")
}
func (UnimplementedTaxServiceServer) UpdateTaxTotal(context.Context, *UpdateTaxTotalRequest) (*UpdateTaxTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaxTotal not implemented")
}
func (UnimplementedTaxServiceServer) CreateTaxSubTotal(context.Context, *CreateTaxSubTotalRequest) (*CreateTaxSubTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaxSubTotal not implemented")
}
func (UnimplementedTaxServiceServer) UpdateTaxSubTotal(context.Context, *UpdateTaxSubTotalRequest) (*UpdateTaxSubTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaxSubTotal not implemented")
}
func (UnimplementedTaxServiceServer) mustEmbedUnimplementedTaxServiceServer() {}
func (UnimplementedTaxServiceServer) testEmbeddedByValue()                    {}

// UnsafeTaxServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaxServiceServer will
// result in compilation errors.
type UnsafeTaxServiceServer interface {
	mustEmbedUnimplementedTaxServiceServer()
}

func RegisterTaxServiceServer(s grpc.ServiceRegistrar, srv TaxServiceServer) {
	// If the following call pancis, it indicates UnimplementedTaxServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaxService_ServiceDesc, srv)
}

func _TaxService_GetTaxSchemes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaxSchemesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxServiceServer).GetTaxSchemes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaxService_GetTaxSchemes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxServiceServer).GetTaxSchemes(ctx, req.(*GetTaxSchemesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxService_GetTaxScheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaxSchemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxServiceServer).GetTaxScheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaxService_GetTaxScheme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxServiceServer).GetTaxScheme(ctx, req.(*GetTaxSchemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxService_CreateTaxCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaxCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxServiceServer).CreateTaxCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaxService_CreateTaxCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxServiceServer).CreateTaxCategory(ctx, req.(*CreateTaxCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxService_UpdateTaxCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaxCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxServiceServer).UpdateTaxCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaxService_UpdateTaxCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxServiceServer).UpdateTaxCategory(ctx, req.(*UpdateTaxCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxService_CreateTaxScheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaxSchemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxServiceServer).CreateTaxScheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaxService_CreateTaxScheme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxServiceServer).CreateTaxScheme(ctx, req.(*CreateTaxSchemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxService_UpdateTaxScheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaxSchemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxServiceServer).UpdateTaxScheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaxService_UpdateTaxScheme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxServiceServer).UpdateTaxScheme(ctx, req.(*UpdateTaxSchemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxService_CreateTaxSchemeJurisdiction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaxSchemeJurisdictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxServiceServer).CreateTaxSchemeJurisdiction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaxService_CreateTaxSchemeJurisdiction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxServiceServer).CreateTaxSchemeJurisdiction(ctx, req.(*CreateTaxSchemeJurisdictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxService_UpdateTaxSchemeJurisdiction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaxSchemeJurisdictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxServiceServer).UpdateTaxSchemeJurisdiction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaxService_UpdateTaxSchemeJurisdiction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxServiceServer).UpdateTaxSchemeJurisdiction(ctx, req.(*UpdateTaxSchemeJurisdictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxService_CreateTaxTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaxTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxServiceServer).CreateTaxTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaxService_CreateTaxTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxServiceServer).CreateTaxTotal(ctx, req.(*CreateTaxTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxService_UpdateTaxTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaxTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxServiceServer).UpdateTaxTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaxService_UpdateTaxTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxServiceServer).UpdateTaxTotal(ctx, req.(*UpdateTaxTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxService_CreateTaxSubTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaxSubTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxServiceServer).CreateTaxSubTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaxService_CreateTaxSubTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxServiceServer).CreateTaxSubTotal(ctx, req.(*CreateTaxSubTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxService_UpdateTaxSubTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaxSubTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxServiceServer).UpdateTaxSubTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaxService_UpdateTaxSubTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxServiceServer).UpdateTaxSubTotal(ctx, req.(*UpdateTaxSubTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaxService_ServiceDesc is the grpc.ServiceDesc for TaxService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaxService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tax.v1.TaxService",
	HandlerType: (*TaxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTaxSchemes",
			Handler:    _TaxService_GetTaxSchemes_Handler,
		},
		{
			MethodName: "GetTaxScheme",
			Handler:    _TaxService_GetTaxScheme_Handler,
		},
		{
			MethodName: "CreateTaxCategory",
			Handler:    _TaxService_CreateTaxCategory_Handler,
		},
		{
			MethodName: "UpdateTaxCategory",
			Handler:    _TaxService_UpdateTaxCategory_Handler,
		},
		{
			MethodName: "CreateTaxScheme",
			Handler:    _TaxService_CreateTaxScheme_Handler,
		},
		{
			MethodName: "UpdateTaxScheme",
			Handler:    _TaxService_UpdateTaxScheme_Handler,
		},
		{
			MethodName: "CreateTaxSchemeJurisdiction",
			Handler:    _TaxService_CreateTaxSchemeJurisdiction_Handler,
		},
		{
			MethodName: "UpdateTaxSchemeJurisdiction",
			Handler:    _TaxService_UpdateTaxSchemeJurisdiction_Handler,
		},
		{
			MethodName: "CreateTaxTotal",
			Handler:    _TaxService_CreateTaxTotal_Handler,
		},
		{
			MethodName: "UpdateTaxTotal",
			Handler:    _TaxService_UpdateTaxTotal_Handler,
		},
		{
			MethodName: "CreateTaxSubTotal",
			Handler:    _TaxService_CreateTaxSubTotal_Handler,
		},
		{
			MethodName: "UpdateTaxSubTotal",
			Handler:    _TaxService_UpdateTaxSubTotal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tax/v1/tax.proto",
}
