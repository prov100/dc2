// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: party/v1/party.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreatePartyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePartyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePartyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePartyRequestMultiError, or nil if none found.
func (m *CreatePartyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePartyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartyName

	// no validation rules for TaxReference1

	// no validation rules for TaxReference2

	// no validation rules for PublicKey

	// no validation rules for Name1

	// no validation rules for Street

	// no validation rules for StreetNumber

	// no validation rules for Floor1

	// no validation rules for PostalCode

	// no validation rules for City

	// no validation rules for StateRegion

	// no validation rules for CountryName

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreatePartyRequestMultiError(errors)
	}

	return nil
}

// CreatePartyRequestMultiError is an error wrapping multiple validation errors
// returned by CreatePartyRequest.ValidateAll() if the designated constraints
// aren't met.
type CreatePartyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePartyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePartyRequestMultiError) AllErrors() []error { return m }

// CreatePartyRequestValidationError is the validation error returned by
// CreatePartyRequest.Validate if the designated constraints aren't met.
type CreatePartyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePartyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePartyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePartyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePartyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePartyRequestValidationError) ErrorName() string {
	return "CreatePartyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePartyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePartyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePartyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePartyRequestValidationError{}

// Validate checks the field values on CreatePartyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePartyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePartyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePartyResponseMultiError, or nil if none found.
func (m *CreatePartyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePartyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParty()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePartyResponseValidationError{
					field:  "Party",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePartyResponseValidationError{
					field:  "Party",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParty()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePartyResponseValidationError{
				field:  "Party",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePartyResponseMultiError(errors)
	}

	return nil
}

// CreatePartyResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePartyResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePartyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePartyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePartyResponseMultiError) AllErrors() []error { return m }

// CreatePartyResponseValidationError is the validation error returned by
// CreatePartyResponse.Validate if the designated constraints aren't met.
type CreatePartyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePartyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePartyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePartyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePartyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePartyResponseValidationError) ErrorName() string {
	return "CreatePartyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePartyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePartyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePartyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePartyResponseValidationError{}

// Validate checks the field values on GetPartiesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPartiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPartiesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPartiesResponseMultiError, or nil if none found.
func (m *GetPartiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPartiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetParties() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPartiesResponseValidationError{
						field:  fmt.Sprintf("Parties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPartiesResponseValidationError{
						field:  fmt.Sprintf("Parties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPartiesResponseValidationError{
					field:  fmt.Sprintf("Parties[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return GetPartiesResponseMultiError(errors)
	}

	return nil
}

// GetPartiesResponseMultiError is an error wrapping multiple validation errors
// returned by GetPartiesResponse.ValidateAll() if the designated constraints
// aren't met.
type GetPartiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPartiesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPartiesResponseMultiError) AllErrors() []error { return m }

// GetPartiesResponseValidationError is the validation error returned by
// GetPartiesResponse.Validate if the designated constraints aren't met.
type GetPartiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPartiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPartiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPartiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPartiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPartiesResponseValidationError) ErrorName() string {
	return "GetPartiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPartiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPartiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPartiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPartiesResponseValidationError{}

// Validate checks the field values on GetPartiesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPartiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPartiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPartiesRequestMultiError, or nil if none found.
func (m *GetPartiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPartiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetPartiesRequestMultiError(errors)
	}

	return nil
}

// GetPartiesRequestMultiError is an error wrapping multiple validation errors
// returned by GetPartiesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPartiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPartiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPartiesRequestMultiError) AllErrors() []error { return m }

// GetPartiesRequestValidationError is the validation error returned by
// GetPartiesRequest.Validate if the designated constraints aren't met.
type GetPartiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPartiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPartiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPartiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPartiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPartiesRequestValidationError) ErrorName() string {
	return "GetPartiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPartiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPartiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPartiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPartiesRequestValidationError{}

// Validate checks the field values on UpdatePartyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePartyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePartyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePartyRequestMultiError, or nil if none found.
func (m *UpdatePartyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePartyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PartyName

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return UpdatePartyRequestMultiError(errors)
	}

	return nil
}

// UpdatePartyRequestMultiError is an error wrapping multiple validation errors
// returned by UpdatePartyRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdatePartyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePartyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePartyRequestMultiError) AllErrors() []error { return m }

// UpdatePartyRequestValidationError is the validation error returned by
// UpdatePartyRequest.Validate if the designated constraints aren't met.
type UpdatePartyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePartyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePartyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePartyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePartyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePartyRequestValidationError) ErrorName() string {
	return "UpdatePartyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePartyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePartyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePartyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePartyRequestValidationError{}

// Validate checks the field values on UpdatePartyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePartyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePartyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePartyResponseMultiError, or nil if none found.
func (m *UpdatePartyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePartyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePartyResponseMultiError(errors)
	}

	return nil
}

// UpdatePartyResponseMultiError is an error wrapping multiple validation
// errors returned by UpdatePartyResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdatePartyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePartyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePartyResponseMultiError) AllErrors() []error { return m }

// UpdatePartyResponseValidationError is the validation error returned by
// UpdatePartyResponse.Validate if the designated constraints aren't met.
type UpdatePartyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePartyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePartyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePartyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePartyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePartyResponseValidationError) ErrorName() string {
	return "UpdatePartyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePartyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePartyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePartyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePartyResponseValidationError{}

// Validate checks the field values on DeletePartyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePartyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePartyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePartyRequestMultiError, or nil if none found.
func (m *DeletePartyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePartyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeletePartyRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeletePartyRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeletePartyRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeletePartyRequestMultiError(errors)
	}

	return nil
}

// DeletePartyRequestMultiError is an error wrapping multiple validation errors
// returned by DeletePartyRequest.ValidateAll() if the designated constraints
// aren't met.
type DeletePartyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePartyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePartyRequestMultiError) AllErrors() []error { return m }

// DeletePartyRequestValidationError is the validation error returned by
// DeletePartyRequest.Validate if the designated constraints aren't met.
type DeletePartyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePartyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePartyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePartyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePartyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePartyRequestValidationError) ErrorName() string {
	return "DeletePartyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePartyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePartyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePartyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePartyRequestValidationError{}

// Validate checks the field values on DeletePartyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePartyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePartyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePartyResponseMultiError, or nil if none found.
func (m *DeletePartyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePartyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeletePartyResponseMultiError(errors)
	}

	return nil
}

// DeletePartyResponseMultiError is an error wrapping multiple validation
// errors returned by DeletePartyResponse.ValidateAll() if the designated
// constraints aren't met.
type DeletePartyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePartyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePartyResponseMultiError) AllErrors() []error { return m }

// DeletePartyResponseValidationError is the validation error returned by
// DeletePartyResponse.Validate if the designated constraints aren't met.
type DeletePartyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePartyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePartyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePartyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePartyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePartyResponseValidationError) ErrorName() string {
	return "DeletePartyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePartyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePartyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePartyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePartyResponseValidationError{}

// Validate checks the field values on GetPartyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPartyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPartyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPartyRequestMultiError, or nil if none found.
func (m *GetPartyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPartyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPartyRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPartyRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPartyRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPartyRequestMultiError(errors)
	}

	return nil
}

// GetPartyRequestMultiError is an error wrapping multiple validation errors
// returned by GetPartyRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPartyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPartyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPartyRequestMultiError) AllErrors() []error { return m }

// GetPartyRequestValidationError is the validation error returned by
// GetPartyRequest.Validate if the designated constraints aren't met.
type GetPartyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPartyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPartyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPartyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPartyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPartyRequestValidationError) ErrorName() string { return "GetPartyRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPartyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPartyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPartyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPartyRequestValidationError{}

// Validate checks the field values on GetPartyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPartyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPartyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPartyResponseMultiError, or nil if none found.
func (m *GetPartyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPartyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParty()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPartyResponseValidationError{
					field:  "Party",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPartyResponseValidationError{
					field:  "Party",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParty()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPartyResponseValidationError{
				field:  "Party",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPartyResponseMultiError(errors)
	}

	return nil
}

// GetPartyResponseMultiError is an error wrapping multiple validation errors
// returned by GetPartyResponse.ValidateAll() if the designated constraints
// aren't met.
type GetPartyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPartyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPartyResponseMultiError) AllErrors() []error { return m }

// GetPartyResponseValidationError is the validation error returned by
// GetPartyResponse.Validate if the designated constraints aren't met.
type GetPartyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPartyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPartyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPartyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPartyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPartyResponseValidationError) ErrorName() string { return "GetPartyResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetPartyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPartyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPartyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPartyResponseValidationError{}

// Validate checks the field values on GetPartyByPkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPartyByPkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPartyByPkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPartyByPkRequestMultiError, or nil if none found.
func (m *GetPartyByPkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPartyByPkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetByIdRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPartyByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPartyByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetByIdRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPartyByPkRequestValidationError{
				field:  "GetByIdRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPartyByPkRequestMultiError(errors)
	}

	return nil
}

// GetPartyByPkRequestMultiError is an error wrapping multiple validation
// errors returned by GetPartyByPkRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPartyByPkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPartyByPkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPartyByPkRequestMultiError) AllErrors() []error { return m }

// GetPartyByPkRequestValidationError is the validation error returned by
// GetPartyByPkRequest.Validate if the designated constraints aren't met.
type GetPartyByPkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPartyByPkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPartyByPkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPartyByPkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPartyByPkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPartyByPkRequestValidationError) ErrorName() string {
	return "GetPartyByPkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPartyByPkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPartyByPkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPartyByPkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPartyByPkRequestValidationError{}

// Validate checks the field values on GetPartyByPkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPartyByPkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPartyByPkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPartyByPkResponseMultiError, or nil if none found.
func (m *GetPartyByPkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPartyByPkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParty()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPartyByPkResponseValidationError{
					field:  "Party",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPartyByPkResponseValidationError{
					field:  "Party",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParty()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPartyByPkResponseValidationError{
				field:  "Party",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPartyByPkResponseMultiError(errors)
	}

	return nil
}

// GetPartyByPkResponseMultiError is an error wrapping multiple validation
// errors returned by GetPartyByPkResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPartyByPkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPartyByPkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPartyByPkResponseMultiError) AllErrors() []error { return m }

// GetPartyByPkResponseValidationError is the validation error returned by
// GetPartyByPkResponse.Validate if the designated constraints aren't met.
type GetPartyByPkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPartyByPkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPartyByPkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPartyByPkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPartyByPkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPartyByPkResponseValidationError) ErrorName() string {
	return "GetPartyByPkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPartyByPkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPartyByPkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPartyByPkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPartyByPkResponseValidationError{}

// Validate checks the field values on Party with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Party) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Party with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PartyMultiError, or nil if none found.
func (m *Party) ValidateAll() error {
	return m.validate(true)
}

func (m *Party) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPartyD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartyValidationError{
					field:  "PartyD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartyValidationError{
					field:  "PartyD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPartyD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartyValidationError{
				field:  "PartyD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartyValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartyValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartyValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartyValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartyValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartyValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PartyMultiError(errors)
	}

	return nil
}

// PartyMultiError is an error wrapping multiple validation errors returned by
// Party.ValidateAll() if the designated constraints aren't met.
type PartyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartyMultiError) AllErrors() []error { return m }

// PartyValidationError is the validation error returned by Party.Validate if
// the designated constraints aren't met.
type PartyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartyValidationError) ErrorName() string { return "PartyValidationError" }

// Error satisfies the builtin error interface
func (e PartyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartyValidationError{}

// Validate checks the field values on PartyD with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PartyD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartyD with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PartyDMultiError, or nil if none found.
func (m *PartyD) ValidateAll() error {
	return m.validate(true)
}

func (m *PartyD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for PartyName

	// no validation rules for TaxReference1

	// no validation rules for TaxReference2

	// no validation rules for PublicKey

	// no validation rules for AddressId

	if len(errors) > 0 {
		return PartyDMultiError(errors)
	}

	return nil
}

// PartyDMultiError is an error wrapping multiple validation errors returned by
// PartyD.ValidateAll() if the designated constraints aren't met.
type PartyDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartyDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartyDMultiError) AllErrors() []error { return m }

// PartyDValidationError is the validation error returned by PartyD.Validate if
// the designated constraints aren't met.
type PartyDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartyDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartyDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartyDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartyDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartyDValidationError) ErrorName() string { return "PartyDValidationError" }

// Error satisfies the builtin error interface
func (e PartyDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartyD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartyDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartyDValidationError{}

// Validate checks the field values on Parties with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Parties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Parties with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PartiesMultiError, or nil if none found.
func (m *Parties) ValidateAll() error {
	return m.validate(true)
}

func (m *Parties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetParties() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PartiesValidationError{
						field:  fmt.Sprintf("Parties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PartiesValidationError{
						field:  fmt.Sprintf("Parties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PartiesValidationError{
					field:  fmt.Sprintf("Parties[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PartiesMultiError(errors)
	}

	return nil
}

// PartiesMultiError is an error wrapping multiple validation errors returned
// by Parties.ValidateAll() if the designated constraints aren't met.
type PartiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartiesMultiError) AllErrors() []error { return m }

// PartiesValidationError is the validation error returned by Parties.Validate
// if the designated constraints aren't met.
type PartiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartiesValidationError) ErrorName() string { return "PartiesValidationError" }

// Error satisfies the builtin error interface
func (e PartiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartiesValidationError{}

// Validate checks the field values on PartyContactDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PartyContactDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartyContactDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PartyContactDetailMultiError, or nil if none found.
func (m *PartyContactDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *PartyContactDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPartyContactDetailD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartyContactDetailValidationError{
					field:  "PartyContactDetailD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartyContactDetailValidationError{
					field:  "PartyContactDetailD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPartyContactDetailD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartyContactDetailValidationError{
				field:  "PartyContactDetailD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartyContactDetailValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartyContactDetailValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartyContactDetailValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartyContactDetailValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartyContactDetailValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartyContactDetailValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PartyContactDetailMultiError(errors)
	}

	return nil
}

// PartyContactDetailMultiError is an error wrapping multiple validation errors
// returned by PartyContactDetail.ValidateAll() if the designated constraints
// aren't met.
type PartyContactDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartyContactDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartyContactDetailMultiError) AllErrors() []error { return m }

// PartyContactDetailValidationError is the validation error returned by
// PartyContactDetail.Validate if the designated constraints aren't met.
type PartyContactDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartyContactDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartyContactDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartyContactDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartyContactDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartyContactDetailValidationError) ErrorName() string {
	return "PartyContactDetailValidationError"
}

// Error satisfies the builtin error interface
func (e PartyContactDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartyContactDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartyContactDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartyContactDetailValidationError{}

// Validate checks the field values on PartyContactDetailD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PartyContactDetailD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartyContactDetailD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PartyContactDetailDMultiError, or nil if none found.
func (m *PartyContactDetailD) ValidateAll() error {
	return m.validate(true)
}

func (m *PartyContactDetailD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for PartyId

	// no validation rules for Name

	// no validation rules for Email

	// no validation rules for Phone

	// no validation rules for Url

	if len(errors) > 0 {
		return PartyContactDetailDMultiError(errors)
	}

	return nil
}

// PartyContactDetailDMultiError is an error wrapping multiple validation
// errors returned by PartyContactDetailD.ValidateAll() if the designated
// constraints aren't met.
type PartyContactDetailDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartyContactDetailDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartyContactDetailDMultiError) AllErrors() []error { return m }

// PartyContactDetailDValidationError is the validation error returned by
// PartyContactDetailD.Validate if the designated constraints aren't met.
type PartyContactDetailDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartyContactDetailDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartyContactDetailDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartyContactDetailDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartyContactDetailDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartyContactDetailDValidationError) ErrorName() string {
	return "PartyContactDetailDValidationError"
}

// Error satisfies the builtin error interface
func (e PartyContactDetailDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartyContactDetailD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartyContactDetailDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartyContactDetailDValidationError{}

// Validate checks the field values on CreatePartyContactDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePartyContactDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePartyContactDetailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePartyContactDetailRequestMultiError, or nil if none found.
func (m *CreatePartyContactDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePartyContactDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartyId

	// no validation rules for Name

	// no validation rules for Email

	// no validation rules for Phone

	// no validation rules for Url

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreatePartyContactDetailRequestMultiError(errors)
	}

	return nil
}

// CreatePartyContactDetailRequestMultiError is an error wrapping multiple
// validation errors returned by CreatePartyContactDetailRequest.ValidateAll()
// if the designated constraints aren't met.
type CreatePartyContactDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePartyContactDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePartyContactDetailRequestMultiError) AllErrors() []error { return m }

// CreatePartyContactDetailRequestValidationError is the validation error
// returned by CreatePartyContactDetailRequest.Validate if the designated
// constraints aren't met.
type CreatePartyContactDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePartyContactDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePartyContactDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePartyContactDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePartyContactDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePartyContactDetailRequestValidationError) ErrorName() string {
	return "CreatePartyContactDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePartyContactDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePartyContactDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePartyContactDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePartyContactDetailRequestValidationError{}

// Validate checks the field values on CreatePartyContactDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreatePartyContactDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePartyContactDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePartyContactDetailResponseMultiError, or nil if none found.
func (m *CreatePartyContactDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePartyContactDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPartyContactDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePartyContactDetailResponseValidationError{
					field:  "PartyContactDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePartyContactDetailResponseValidationError{
					field:  "PartyContactDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPartyContactDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePartyContactDetailResponseValidationError{
				field:  "PartyContactDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePartyContactDetailResponseMultiError(errors)
	}

	return nil
}

// CreatePartyContactDetailResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreatePartyContactDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePartyContactDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePartyContactDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePartyContactDetailResponseMultiError) AllErrors() []error { return m }

// CreatePartyContactDetailResponseValidationError is the validation error
// returned by CreatePartyContactDetailResponse.Validate if the designated
// constraints aren't met.
type CreatePartyContactDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePartyContactDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePartyContactDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePartyContactDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePartyContactDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePartyContactDetailResponseValidationError) ErrorName() string {
	return "CreatePartyContactDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePartyContactDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePartyContactDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePartyContactDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePartyContactDetailResponseValidationError{}

// Validate checks the field values on UpdatePartyContactDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePartyContactDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePartyContactDetailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdatePartyContactDetailRequestMultiError, or nil if none found.
func (m *UpdatePartyContactDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePartyContactDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartyId

	// no validation rules for Name

	// no validation rules for Email

	// no validation rules for Phone

	// no validation rules for Url

	// no validation rules for PartyContactDetailId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return UpdatePartyContactDetailRequestMultiError(errors)
	}

	return nil
}

// UpdatePartyContactDetailRequestMultiError is an error wrapping multiple
// validation errors returned by UpdatePartyContactDetailRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdatePartyContactDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePartyContactDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePartyContactDetailRequestMultiError) AllErrors() []error { return m }

// UpdatePartyContactDetailRequestValidationError is the validation error
// returned by UpdatePartyContactDetailRequest.Validate if the designated
// constraints aren't met.
type UpdatePartyContactDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePartyContactDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePartyContactDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePartyContactDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePartyContactDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePartyContactDetailRequestValidationError) ErrorName() string {
	return "UpdatePartyContactDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePartyContactDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePartyContactDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePartyContactDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePartyContactDetailRequestValidationError{}

// Validate checks the field values on UpdatePartyContactDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdatePartyContactDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePartyContactDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdatePartyContactDetailResponseMultiError, or nil if none found.
func (m *UpdatePartyContactDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePartyContactDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePartyContactDetailResponseMultiError(errors)
	}

	return nil
}

// UpdatePartyContactDetailResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdatePartyContactDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdatePartyContactDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePartyContactDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePartyContactDetailResponseMultiError) AllErrors() []error { return m }

// UpdatePartyContactDetailResponseValidationError is the validation error
// returned by UpdatePartyContactDetailResponse.Validate if the designated
// constraints aren't met.
type UpdatePartyContactDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePartyContactDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePartyContactDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePartyContactDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePartyContactDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePartyContactDetailResponseValidationError) ErrorName() string {
	return "UpdatePartyContactDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePartyContactDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePartyContactDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePartyContactDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePartyContactDetailResponseValidationError{}

// Validate checks the field values on GetPartyContactDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPartyContactDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPartyContactDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPartyContactDetailRequestMultiError, or nil if none found.
func (m *GetPartyContactDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPartyContactDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPartyContactDetailRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPartyContactDetailRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPartyContactDetailRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPartyContactDetailRequestMultiError(errors)
	}

	return nil
}

// GetPartyContactDetailRequestMultiError is an error wrapping multiple
// validation errors returned by GetPartyContactDetailRequest.ValidateAll() if
// the designated constraints aren't met.
type GetPartyContactDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPartyContactDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPartyContactDetailRequestMultiError) AllErrors() []error { return m }

// GetPartyContactDetailRequestValidationError is the validation error returned
// by GetPartyContactDetailRequest.Validate if the designated constraints
// aren't met.
type GetPartyContactDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPartyContactDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPartyContactDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPartyContactDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPartyContactDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPartyContactDetailRequestValidationError) ErrorName() string {
	return "GetPartyContactDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPartyContactDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPartyContactDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPartyContactDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPartyContactDetailRequestValidationError{}

// Validate checks the field values on GetPartyContactDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPartyContactDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPartyContactDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPartyContactDetailResponseMultiError, or nil if none found.
func (m *GetPartyContactDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPartyContactDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPartyContactDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPartyContactDetailResponseValidationError{
					field:  "PartyContactDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPartyContactDetailResponseValidationError{
					field:  "PartyContactDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPartyContactDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPartyContactDetailResponseValidationError{
				field:  "PartyContactDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPartyContactDetailResponseMultiError(errors)
	}

	return nil
}

// GetPartyContactDetailResponseMultiError is an error wrapping multiple
// validation errors returned by GetPartyContactDetailResponse.ValidateAll()
// if the designated constraints aren't met.
type GetPartyContactDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPartyContactDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPartyContactDetailResponseMultiError) AllErrors() []error { return m }

// GetPartyContactDetailResponseValidationError is the validation error
// returned by GetPartyContactDetailResponse.Validate if the designated
// constraints aren't met.
type GetPartyContactDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPartyContactDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPartyContactDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPartyContactDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPartyContactDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPartyContactDetailResponseValidationError) ErrorName() string {
	return "GetPartyContactDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPartyContactDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPartyContactDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPartyContactDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPartyContactDetailResponseValidationError{}

// Validate checks the field values on DeletePartyContactDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePartyContactDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePartyContactDetailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeletePartyContactDetailRequestMultiError, or nil if none found.
func (m *DeletePartyContactDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePartyContactDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeletePartyContactDetailRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeletePartyContactDetailRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeletePartyContactDetailRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeletePartyContactDetailRequestMultiError(errors)
	}

	return nil
}

// DeletePartyContactDetailRequestMultiError is an error wrapping multiple
// validation errors returned by DeletePartyContactDetailRequest.ValidateAll()
// if the designated constraints aren't met.
type DeletePartyContactDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePartyContactDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePartyContactDetailRequestMultiError) AllErrors() []error { return m }

// DeletePartyContactDetailRequestValidationError is the validation error
// returned by DeletePartyContactDetailRequest.Validate if the designated
// constraints aren't met.
type DeletePartyContactDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePartyContactDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePartyContactDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePartyContactDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePartyContactDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePartyContactDetailRequestValidationError) ErrorName() string {
	return "DeletePartyContactDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePartyContactDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePartyContactDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePartyContactDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePartyContactDetailRequestValidationError{}

// Validate checks the field values on DeletePartyContactDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeletePartyContactDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePartyContactDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeletePartyContactDetailResponseMultiError, or nil if none found.
func (m *DeletePartyContactDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePartyContactDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeletePartyContactDetailResponseMultiError(errors)
	}

	return nil
}

// DeletePartyContactDetailResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeletePartyContactDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type DeletePartyContactDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePartyContactDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePartyContactDetailResponseMultiError) AllErrors() []error { return m }

// DeletePartyContactDetailResponseValidationError is the validation error
// returned by DeletePartyContactDetailResponse.Validate if the designated
// constraints aren't met.
type DeletePartyContactDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePartyContactDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePartyContactDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePartyContactDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePartyContactDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePartyContactDetailResponseValidationError) ErrorName() string {
	return "DeletePartyContactDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePartyContactDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePartyContactDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePartyContactDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePartyContactDetailResponseValidationError{}

// Validate checks the field values on PartyContactDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PartyContactDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartyContactDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PartyContactDetailsMultiError, or nil if none found.
func (m *PartyContactDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *PartyContactDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPartyContactDetails() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PartyContactDetailsValidationError{
						field:  fmt.Sprintf("PartyContactDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PartyContactDetailsValidationError{
						field:  fmt.Sprintf("PartyContactDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PartyContactDetailsValidationError{
					field:  fmt.Sprintf("PartyContactDetails[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PartyContactDetailsMultiError(errors)
	}

	return nil
}

// PartyContactDetailsMultiError is an error wrapping multiple validation
// errors returned by PartyContactDetails.ValidateAll() if the designated
// constraints aren't met.
type PartyContactDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartyContactDetailsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartyContactDetailsMultiError) AllErrors() []error { return m }

// PartyContactDetailsValidationError is the validation error returned by
// PartyContactDetails.Validate if the designated constraints aren't met.
type PartyContactDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartyContactDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartyContactDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartyContactDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartyContactDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartyContactDetailsValidationError) ErrorName() string {
	return "PartyContactDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e PartyContactDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartyContactDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartyContactDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartyContactDetailsValidationError{}

// Validate checks the field values on CreateDisplayedAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDisplayedAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDisplayedAddressRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateDisplayedAddressRequestMultiError, or nil if none found.
func (m *CreateDisplayedAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDisplayedAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentPartyId

	// no validation rules for AddressLineNumber

	// no validation rules for AddressLineText

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateDisplayedAddressRequestMultiError(errors)
	}

	return nil
}

// CreateDisplayedAddressRequestMultiError is an error wrapping multiple
// validation errors returned by CreateDisplayedAddressRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateDisplayedAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDisplayedAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDisplayedAddressRequestMultiError) AllErrors() []error { return m }

// CreateDisplayedAddressRequestValidationError is the validation error
// returned by CreateDisplayedAddressRequest.Validate if the designated
// constraints aren't met.
type CreateDisplayedAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDisplayedAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDisplayedAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDisplayedAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDisplayedAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDisplayedAddressRequestValidationError) ErrorName() string {
	return "CreateDisplayedAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDisplayedAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDisplayedAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDisplayedAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDisplayedAddressRequestValidationError{}

// Validate checks the field values on CreateDisplayedAddressResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDisplayedAddressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDisplayedAddressResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateDisplayedAddressResponseMultiError, or nil if none found.
func (m *CreateDisplayedAddressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDisplayedAddressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDisplayedAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDisplayedAddressResponseValidationError{
					field:  "DisplayedAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDisplayedAddressResponseValidationError{
					field:  "DisplayedAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDisplayedAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDisplayedAddressResponseValidationError{
				field:  "DisplayedAddress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDisplayedAddressResponseMultiError(errors)
	}

	return nil
}

// CreateDisplayedAddressResponseMultiError is an error wrapping multiple
// validation errors returned by CreateDisplayedAddressResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateDisplayedAddressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDisplayedAddressResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDisplayedAddressResponseMultiError) AllErrors() []error { return m }

// CreateDisplayedAddressResponseValidationError is the validation error
// returned by CreateDisplayedAddressResponse.Validate if the designated
// constraints aren't met.
type CreateDisplayedAddressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDisplayedAddressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDisplayedAddressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDisplayedAddressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDisplayedAddressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDisplayedAddressResponseValidationError) ErrorName() string {
	return "CreateDisplayedAddressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDisplayedAddressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDisplayedAddressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDisplayedAddressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDisplayedAddressResponseValidationError{}

// Validate checks the field values on DisplayedAddress with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DisplayedAddress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisplayedAddress with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisplayedAddressMultiError, or nil if none found.
func (m *DisplayedAddress) ValidateAll() error {
	return m.validate(true)
}

func (m *DisplayedAddress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentPartyId

	// no validation rules for AddressLineNumber

	// no validation rules for AddressLineText

	if len(errors) > 0 {
		return DisplayedAddressMultiError(errors)
	}

	return nil
}

// DisplayedAddressMultiError is an error wrapping multiple validation errors
// returned by DisplayedAddress.ValidateAll() if the designated constraints
// aren't met.
type DisplayedAddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisplayedAddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisplayedAddressMultiError) AllErrors() []error { return m }

// DisplayedAddressValidationError is the validation error returned by
// DisplayedAddress.Validate if the designated constraints aren't met.
type DisplayedAddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisplayedAddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisplayedAddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisplayedAddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisplayedAddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisplayedAddressValidationError) ErrorName() string { return "DisplayedAddressValidationError" }

// Error satisfies the builtin error interface
func (e DisplayedAddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisplayedAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisplayedAddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisplayedAddressValidationError{}

// Validate checks the field values on CreateFacilityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFacilityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFacilityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFacilityRequestMultiError, or nil if none found.
func (m *CreateFacilityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFacilityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FacilityName

	// no validation rules for UnLocationCode

	// no validation rules for FacilityBicCode

	// no validation rules for FacilitySmdgCode

	// no validation rules for LocationId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateFacilityRequestMultiError(errors)
	}

	return nil
}

// CreateFacilityRequestMultiError is an error wrapping multiple validation
// errors returned by CreateFacilityRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateFacilityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFacilityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFacilityRequestMultiError) AllErrors() []error { return m }

// CreateFacilityRequestValidationError is the validation error returned by
// CreateFacilityRequest.Validate if the designated constraints aren't met.
type CreateFacilityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFacilityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFacilityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFacilityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFacilityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFacilityRequestValidationError) ErrorName() string {
	return "CreateFacilityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFacilityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFacilityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFacilityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFacilityRequestValidationError{}

// Validate checks the field values on CreateFacilityResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFacilityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFacilityResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFacilityResponseMultiError, or nil if none found.
func (m *CreateFacilityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFacilityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFacility()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateFacilityResponseValidationError{
					field:  "Facility",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateFacilityResponseValidationError{
					field:  "Facility",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFacility()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateFacilityResponseValidationError{
				field:  "Facility",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateFacilityResponseMultiError(errors)
	}

	return nil
}

// CreateFacilityResponseMultiError is an error wrapping multiple validation
// errors returned by CreateFacilityResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateFacilityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFacilityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFacilityResponseMultiError) AllErrors() []error { return m }

// CreateFacilityResponseValidationError is the validation error returned by
// CreateFacilityResponse.Validate if the designated constraints aren't met.
type CreateFacilityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFacilityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFacilityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFacilityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFacilityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFacilityResponseValidationError) ErrorName() string {
	return "CreateFacilityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFacilityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFacilityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFacilityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFacilityResponseValidationError{}

// Validate checks the field values on Facility with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Facility) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Facility with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FacilityMultiError, or nil
// if none found.
func (m *Facility) ValidateAll() error {
	return m.validate(true)
}

func (m *Facility) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFacilityD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FacilityValidationError{
					field:  "FacilityD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FacilityValidationError{
					field:  "FacilityD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFacilityD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FacilityValidationError{
				field:  "FacilityD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FacilityValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FacilityValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FacilityValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FacilityValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FacilityValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FacilityValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FacilityMultiError(errors)
	}

	return nil
}

// FacilityMultiError is an error wrapping multiple validation errors returned
// by Facility.ValidateAll() if the designated constraints aren't met.
type FacilityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FacilityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FacilityMultiError) AllErrors() []error { return m }

// FacilityValidationError is the validation error returned by
// Facility.Validate if the designated constraints aren't met.
type FacilityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FacilityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FacilityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FacilityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FacilityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FacilityValidationError) ErrorName() string { return "FacilityValidationError" }

// Error satisfies the builtin error interface
func (e FacilityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFacility.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FacilityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FacilityValidationError{}

// Validate checks the field values on FacilityD with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FacilityD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FacilityD with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FacilityDMultiError, or nil
// if none found.
func (m *FacilityD) ValidateAll() error {
	return m.validate(true)
}

func (m *FacilityD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for FacilityName

	// no validation rules for UnLocationCode

	// no validation rules for FacilityBicCode

	// no validation rules for FacilitySmdgCode

	// no validation rules for LocationId

	if len(errors) > 0 {
		return FacilityDMultiError(errors)
	}

	return nil
}

// FacilityDMultiError is an error wrapping multiple validation errors returned
// by FacilityD.ValidateAll() if the designated constraints aren't met.
type FacilityDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FacilityDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FacilityDMultiError) AllErrors() []error { return m }

// FacilityDValidationError is the validation error returned by
// FacilityD.Validate if the designated constraints aren't met.
type FacilityDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FacilityDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FacilityDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FacilityDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FacilityDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FacilityDValidationError) ErrorName() string { return "FacilityDValidationError" }

// Error satisfies the builtin error interface
func (e FacilityDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFacilityD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FacilityDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FacilityDValidationError{}

// Validate checks the field values on CreatePartyFunctionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePartyFunctionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePartyFunctionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePartyFunctionRequestMultiError, or nil if none found.
func (m *CreatePartyFunctionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePartyFunctionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartyFunctionCode

	// no validation rules for PartyFunctionName

	// no validation rules for PartyFunctionDescription

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreatePartyFunctionRequestMultiError(errors)
	}

	return nil
}

// CreatePartyFunctionRequestMultiError is an error wrapping multiple
// validation errors returned by CreatePartyFunctionRequest.ValidateAll() if
// the designated constraints aren't met.
type CreatePartyFunctionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePartyFunctionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePartyFunctionRequestMultiError) AllErrors() []error { return m }

// CreatePartyFunctionRequestValidationError is the validation error returned
// by CreatePartyFunctionRequest.Validate if the designated constraints aren't met.
type CreatePartyFunctionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePartyFunctionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePartyFunctionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePartyFunctionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePartyFunctionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePartyFunctionRequestValidationError) ErrorName() string {
	return "CreatePartyFunctionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePartyFunctionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePartyFunctionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePartyFunctionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePartyFunctionRequestValidationError{}

// Validate checks the field values on CreatePartyFunctionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePartyFunctionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePartyFunctionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePartyFunctionResponseMultiError, or nil if none found.
func (m *CreatePartyFunctionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePartyFunctionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPartyFunction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePartyFunctionResponseValidationError{
					field:  "PartyFunction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePartyFunctionResponseValidationError{
					field:  "PartyFunction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPartyFunction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePartyFunctionResponseValidationError{
				field:  "PartyFunction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePartyFunctionResponseMultiError(errors)
	}

	return nil
}

// CreatePartyFunctionResponseMultiError is an error wrapping multiple
// validation errors returned by CreatePartyFunctionResponse.ValidateAll() if
// the designated constraints aren't met.
type CreatePartyFunctionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePartyFunctionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePartyFunctionResponseMultiError) AllErrors() []error { return m }

// CreatePartyFunctionResponseValidationError is the validation error returned
// by CreatePartyFunctionResponse.Validate if the designated constraints
// aren't met.
type CreatePartyFunctionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePartyFunctionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePartyFunctionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePartyFunctionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePartyFunctionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePartyFunctionResponseValidationError) ErrorName() string {
	return "CreatePartyFunctionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePartyFunctionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePartyFunctionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePartyFunctionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePartyFunctionResponseValidationError{}

// Validate checks the field values on PartyFunction with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PartyFunction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartyFunction with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PartyFunctionMultiError, or
// nil if none found.
func (m *PartyFunction) ValidateAll() error {
	return m.validate(true)
}

func (m *PartyFunction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartyFunctionCode

	// no validation rules for PartyFunctionName

	// no validation rules for PartyFunctionDescription

	if len(errors) > 0 {
		return PartyFunctionMultiError(errors)
	}

	return nil
}

// PartyFunctionMultiError is an error wrapping multiple validation errors
// returned by PartyFunction.ValidateAll() if the designated constraints
// aren't met.
type PartyFunctionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartyFunctionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartyFunctionMultiError) AllErrors() []error { return m }

// PartyFunctionValidationError is the validation error returned by
// PartyFunction.Validate if the designated constraints aren't met.
type PartyFunctionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartyFunctionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartyFunctionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartyFunctionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartyFunctionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartyFunctionValidationError) ErrorName() string { return "PartyFunctionValidationError" }

// Error satisfies the builtin error interface
func (e PartyFunctionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartyFunction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartyFunctionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartyFunctionValidationError{}

// Validate checks the field values on CreatePartyIdentifyingCodeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreatePartyIdentifyingCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePartyIdentifyingCodeRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreatePartyIdentifyingCodeRequestMultiError, or nil if none found.
func (m *CreatePartyIdentifyingCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePartyIdentifyingCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DcsaResponsibleAgencyCode

	// no validation rules for PartyId

	// no validation rules for CodeListName

	// no validation rules for PartyCode

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreatePartyIdentifyingCodeRequestMultiError(errors)
	}

	return nil
}

// CreatePartyIdentifyingCodeRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreatePartyIdentifyingCodeRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePartyIdentifyingCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePartyIdentifyingCodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePartyIdentifyingCodeRequestMultiError) AllErrors() []error { return m }

// CreatePartyIdentifyingCodeRequestValidationError is the validation error
// returned by CreatePartyIdentifyingCodeRequest.Validate if the designated
// constraints aren't met.
type CreatePartyIdentifyingCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePartyIdentifyingCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePartyIdentifyingCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePartyIdentifyingCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePartyIdentifyingCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePartyIdentifyingCodeRequestValidationError) ErrorName() string {
	return "CreatePartyIdentifyingCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePartyIdentifyingCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePartyIdentifyingCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePartyIdentifyingCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePartyIdentifyingCodeRequestValidationError{}

// Validate checks the field values on CreatePartyIdentifyingCodeResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreatePartyIdentifyingCodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePartyIdentifyingCodeResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreatePartyIdentifyingCodeResponseMultiError, or nil if none found.
func (m *CreatePartyIdentifyingCodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePartyIdentifyingCodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPartyIdentifyingCode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePartyIdentifyingCodeResponseValidationError{
					field:  "PartyIdentifyingCode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePartyIdentifyingCodeResponseValidationError{
					field:  "PartyIdentifyingCode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPartyIdentifyingCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePartyIdentifyingCodeResponseValidationError{
				field:  "PartyIdentifyingCode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePartyIdentifyingCodeResponseMultiError(errors)
	}

	return nil
}

// CreatePartyIdentifyingCodeResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreatePartyIdentifyingCodeResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePartyIdentifyingCodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePartyIdentifyingCodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePartyIdentifyingCodeResponseMultiError) AllErrors() []error { return m }

// CreatePartyIdentifyingCodeResponseValidationError is the validation error
// returned by CreatePartyIdentifyingCodeResponse.Validate if the designated
// constraints aren't met.
type CreatePartyIdentifyingCodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePartyIdentifyingCodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePartyIdentifyingCodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePartyIdentifyingCodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePartyIdentifyingCodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePartyIdentifyingCodeResponseValidationError) ErrorName() string {
	return "CreatePartyIdentifyingCodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePartyIdentifyingCodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePartyIdentifyingCodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePartyIdentifyingCodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePartyIdentifyingCodeResponseValidationError{}

// Validate checks the field values on PartyIdentifyingCode with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PartyIdentifyingCode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartyIdentifyingCode with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PartyIdentifyingCodeMultiError, or nil if none found.
func (m *PartyIdentifyingCode) ValidateAll() error {
	return m.validate(true)
}

func (m *PartyIdentifyingCode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DcsaResponsibleAgencyCode

	// no validation rules for PartyId

	// no validation rules for CodeListName

	// no validation rules for PartyCode

	if len(errors) > 0 {
		return PartyIdentifyingCodeMultiError(errors)
	}

	return nil
}

// PartyIdentifyingCodeMultiError is an error wrapping multiple validation
// errors returned by PartyIdentifyingCode.ValidateAll() if the designated
// constraints aren't met.
type PartyIdentifyingCodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartyIdentifyingCodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartyIdentifyingCodeMultiError) AllErrors() []error { return m }

// PartyIdentifyingCodeValidationError is the validation error returned by
// PartyIdentifyingCode.Validate if the designated constraints aren't met.
type PartyIdentifyingCodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartyIdentifyingCodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartyIdentifyingCodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartyIdentifyingCodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartyIdentifyingCodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartyIdentifyingCodeValidationError) ErrorName() string {
	return "PartyIdentifyingCodeValidationError"
}

// Error satisfies the builtin error interface
func (e PartyIdentifyingCodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartyIdentifyingCode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartyIdentifyingCodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartyIdentifyingCodeValidationError{}
