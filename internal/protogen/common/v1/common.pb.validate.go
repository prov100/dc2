// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: common/v1/common.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetByIdRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByIdRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetByIdRequestMultiError,
// or nil if none found.
func (m *GetByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetByIdRequestMultiError(errors)
	}

	return nil
}

// GetByIdRequestMultiError is an error wrapping multiple validation errors
// returned by GetByIdRequest.ValidateAll() if the designated constraints
// aren't met.
type GetByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByIdRequestMultiError) AllErrors() []error { return m }

// GetByIdRequestValidationError is the validation error returned by
// GetByIdRequest.Validate if the designated constraints aren't met.
type GetByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByIdRequestValidationError) ErrorName() string { return "GetByIdRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByIdRequestValidationError{}

// Validate checks the field values on GetRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRequestMultiError, or
// nil if none found.
func (m *GetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetRequestMultiError(errors)
	}

	return nil
}

// GetRequestMultiError is an error wrapping multiple validation errors
// returned by GetRequest.ValidateAll() if the designated constraints aren't met.
type GetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRequestMultiError) AllErrors() []error { return m }

// GetRequestValidationError is the validation error returned by
// GetRequest.Validate if the designated constraints aren't met.
type GetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRequestValidationError) ErrorName() string { return "GetRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRequestValidationError{}

// Validate checks the field values on Empty with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Empty) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Empty with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EmptyMultiError, or nil if none found.
func (m *Empty) ValidateAll() error {
	return m.validate(true)
}

func (m *Empty) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyMultiError(errors)
	}

	return nil
}

// EmptyMultiError is an error wrapping multiple validation errors returned by
// Empty.ValidateAll() if the designated constraints aren't met.
type EmptyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyMultiError) AllErrors() []error { return m }

// EmptyValidationError is the validation error returned by Empty.Validate if
// the designated constraints aren't met.
type EmptyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyValidationError) ErrorName() string { return "EmptyValidationError" }

// Error satisfies the builtin error interface
func (e EmptyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmpty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyValidationError{}

// Validate checks the field values on CrUpdUser with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CrUpdUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CrUpdUser with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CrUpdUserMultiError, or nil
// if none found.
func (m *CrUpdUser) ValidateAll() error {
	return m.validate(true)
}

func (m *CrUpdUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for CreatedByUserId

	// no validation rules for UpdatedByUserId

	if len(errors) > 0 {
		return CrUpdUserMultiError(errors)
	}

	return nil
}

// CrUpdUserMultiError is an error wrapping multiple validation errors returned
// by CrUpdUser.ValidateAll() if the designated constraints aren't met.
type CrUpdUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CrUpdUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CrUpdUserMultiError) AllErrors() []error { return m }

// CrUpdUserValidationError is the validation error returned by
// CrUpdUser.Validate if the designated constraints aren't met.
type CrUpdUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CrUpdUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CrUpdUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CrUpdUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CrUpdUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CrUpdUserValidationError) ErrorName() string { return "CrUpdUserValidationError" }

// Error satisfies the builtin error interface
func (e CrUpdUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCrUpdUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CrUpdUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CrUpdUserValidationError{}

// Validate checks the field values on CrUpdTime with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CrUpdTime) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CrUpdTime with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CrUpdTimeMultiError, or nil
// if none found.
func (m *CrUpdTime) ValidateAll() error {
	return m.validate(true)
}

func (m *CrUpdTime) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CrUpdTimeValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CrUpdTimeValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CrUpdTimeValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CrUpdTimeValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CrUpdTimeValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CrUpdTimeValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CrUpdTimeMultiError(errors)
	}

	return nil
}

// CrUpdTimeMultiError is an error wrapping multiple validation errors returned
// by CrUpdTime.ValidateAll() if the designated constraints aren't met.
type CrUpdTimeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CrUpdTimeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CrUpdTimeMultiError) AllErrors() []error { return m }

// CrUpdTimeValidationError is the validation error returned by
// CrUpdTime.Validate if the designated constraints aren't met.
type CrUpdTimeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CrUpdTimeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CrUpdTimeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CrUpdTimeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CrUpdTimeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CrUpdTimeValidationError) ErrorName() string { return "CrUpdTimeValidationError" }

// Error satisfies the builtin error interface
func (e CrUpdTimeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCrUpdTime.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CrUpdTimeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CrUpdTimeValidationError{}

// Validate checks the field values on PartyInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PartyInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartyInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PartyInfoMultiError, or nil
// if none found.
func (m *PartyInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PartyInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartyId

	// no validation rules for PartyName

	if len(errors) > 0 {
		return PartyInfoMultiError(errors)
	}

	return nil
}

// PartyInfoMultiError is an error wrapping multiple validation errors returned
// by PartyInfo.ValidateAll() if the designated constraints aren't met.
type PartyInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartyInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartyInfoMultiError) AllErrors() []error { return m }

// PartyInfoValidationError is the validation error returned by
// PartyInfo.Validate if the designated constraints aren't met.
type PartyInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartyInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartyInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartyInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartyInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartyInfoValidationError) ErrorName() string { return "PartyInfoValidationError" }

// Error satisfies the builtin error interface
func (e PartyInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartyInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartyInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartyInfoValidationError{}

// Validate checks the field values on Address with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Address) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Address with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AddressMultiError, or nil if none found.
func (m *Address) ValidateAll() error {
	return m.validate(true)
}

func (m *Address) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for Name1

	// no validation rules for Street

	// no validation rules for StreetNumber

	// no validation rules for Floor1

	// no validation rules for PostalCode

	// no validation rules for City

	// no validation rules for StateRegion

	// no validation rules for CountryName

	if len(errors) > 0 {
		return AddressMultiError(errors)
	}

	return nil
}

// AddressMultiError is an error wrapping multiple validation errors returned
// by Address.ValidateAll() if the designated constraints aren't met.
type AddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressMultiError) AllErrors() []error { return m }

// AddressValidationError is the validation error returned by Address.Validate
// if the designated constraints aren't met.
type AddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressValidationError) ErrorName() string { return "AddressValidationError" }

// Error satisfies the builtin error interface
func (e AddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressValidationError{}

// Validate checks the field values on Location with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Location) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Location with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LocationMultiError, or nil
// if none found.
func (m *Location) ValidateAll() error {
	return m.validate(true)
}

func (m *Location) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for LocId

	// no validation rules for Description

	// no validation rules for Conditions

	// no validation rules for CountrySubentity

	// no validation rules for CountrySubentityCode

	// no validation rules for LocationTypeCode

	// no validation rules for InformationURI

	// no validation rules for LocName

	if all {
		switch v := interface{}(m.GetValidityPeriodStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LocationValidationError{
					field:  "ValidityPeriodStartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LocationValidationError{
					field:  "ValidityPeriodStartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValidityPeriodStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LocationValidationError{
				field:  "ValidityPeriodStartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetValidityPeriodEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LocationValidationError{
					field:  "ValidityPeriodEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LocationValidationError{
					field:  "ValidityPeriodEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValidityPeriodEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LocationValidationError{
				field:  "ValidityPeriodEndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LocationCoordLat

	// no validation rules for LocationCoordLon

	// no validation rules for AltitudeMeasure

	if len(errors) > 0 {
		return LocationMultiError(errors)
	}

	return nil
}

// LocationMultiError is an error wrapping multiple validation errors returned
// by Location.ValidateAll() if the designated constraints aren't met.
type LocationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LocationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LocationMultiError) AllErrors() []error { return m }

// LocationValidationError is the validation error returned by
// Location.Validate if the designated constraints aren't met.
type LocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocationValidationError) ErrorName() string { return "LocationValidationError" }

// Error satisfies the builtin error interface
func (e LocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocationValidationError{}

// Validate checks the field values on TaxSchemeInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TaxSchemeInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaxSchemeInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TaxSchemeInfoMultiError, or
// nil if none found.
func (m *TaxSchemeInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *TaxSchemeInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaxSchemeId

	// no validation rules for TaxSchemeName

	if len(errors) > 0 {
		return TaxSchemeInfoMultiError(errors)
	}

	return nil
}

// TaxSchemeInfoMultiError is an error wrapping multiple validation errors
// returned by TaxSchemeInfo.ValidateAll() if the designated constraints
// aren't met.
type TaxSchemeInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaxSchemeInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaxSchemeInfoMultiError) AllErrors() []error { return m }

// TaxSchemeInfoValidationError is the validation error returned by
// TaxSchemeInfo.Validate if the designated constraints aren't met.
type TaxSchemeInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaxSchemeInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaxSchemeInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaxSchemeInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaxSchemeInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaxSchemeInfoValidationError) ErrorName() string { return "TaxSchemeInfoValidationError" }

// Error satisfies the builtin error interface
func (e TaxSchemeInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaxSchemeInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaxSchemeInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaxSchemeInfoValidationError{}

// Validate checks the field values on Role with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Role) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Role with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RoleMultiError, or nil if none found.
func (m *Role) ValidateAll() error {
	return m.validate(true)
}

func (m *Role) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	if len(errors) > 0 {
		return RoleMultiError(errors)
	}

	return nil
}

// RoleMultiError is an error wrapping multiple validation errors returned by
// Role.ValidateAll() if the designated constraints aren't met.
type RoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleMultiError) AllErrors() []error { return m }

// RoleValidationError is the validation error returned by Role.Validate if the
// designated constraints aren't met.
type RoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleValidationError) ErrorName() string { return "RoleValidationError" }

// Error satisfies the builtin error interface
func (e RoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleValidationError{}

// Validate checks the field values on CreateRole with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateRole) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRole with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateRoleMultiError, or
// nil if none found.
func (m *CreateRole) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRole) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Auth0Domain

	// no validation rules for Auth0MgmtToken

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateRoleMultiError(errors)
	}

	return nil
}

// CreateRoleMultiError is an error wrapping multiple validation errors
// returned by CreateRole.ValidateAll() if the designated constraints aren't met.
type CreateRoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleMultiError) AllErrors() []error { return m }

// CreateRoleValidationError is the validation error returned by
// CreateRole.Validate if the designated constraints aren't met.
type CreateRoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleValidationError) ErrorName() string { return "CreateRoleValidationError" }

// Error satisfies the builtin error interface
func (e CreateRoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleValidationError{}

// Validate checks the field values on GetRole with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRole) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRole with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GetRoleMultiError, or nil if none found.
func (m *GetRole) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRole) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for UserId

	// no validation rules for Auth0Domain

	// no validation rules for Auth0MgmtToken

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetRoleMultiError(errors)
	}

	return nil
}

// GetRoleMultiError is an error wrapping multiple validation errors returned
// by GetRole.ValidateAll() if the designated constraints aren't met.
type GetRoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleMultiError) AllErrors() []error { return m }

// GetRoleValidationError is the validation error returned by GetRole.Validate
// if the designated constraints aren't met.
type GetRoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleValidationError) ErrorName() string { return "GetRoleValidationError" }

// Error satisfies the builtin error interface
func (e GetRoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleValidationError{}

// Validate checks the field values on GetRoles with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRoles) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoles with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRolesMultiError, or nil
// if none found.
func (m *GetRoles) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoles) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Auth0Domain

	// no validation rules for Auth0MgmtToken

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetRolesMultiError(errors)
	}

	return nil
}

// GetRolesMultiError is an error wrapping multiple validation errors returned
// by GetRoles.ValidateAll() if the designated constraints aren't met.
type GetRolesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRolesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRolesMultiError) AllErrors() []error { return m }

// GetRolesValidationError is the validation error returned by
// GetRoles.Validate if the designated constraints aren't met.
type GetRolesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRolesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRolesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRolesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRolesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRolesValidationError) ErrorName() string { return "GetRolesValidationError" }

// Error satisfies the builtin error interface
func (e GetRolesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoles.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRolesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRolesValidationError{}

// Validate checks the field values on DeleteRole with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteRole) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRole with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteRoleMultiError, or
// nil if none found.
func (m *DeleteRole) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRole) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for Auth0Domain

	// no validation rules for Auth0MgmtToken

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return DeleteRoleMultiError(errors)
	}

	return nil
}

// DeleteRoleMultiError is an error wrapping multiple validation errors
// returned by DeleteRole.ValidateAll() if the designated constraints aren't met.
type DeleteRoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleMultiError) AllErrors() []error { return m }

// DeleteRoleValidationError is the validation error returned by
// DeleteRole.Validate if the designated constraints aren't met.
type DeleteRoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleValidationError) ErrorName() string { return "DeleteRoleValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleValidationError{}

// Validate checks the field values on UpdateRole with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateRole) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRole with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateRoleMultiError, or
// nil if none found.
func (m *UpdateRole) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRole) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Auth0Domain

	// no validation rules for Auth0MgmtToken

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return UpdateRoleMultiError(errors)
	}

	return nil
}

// UpdateRoleMultiError is an error wrapping multiple validation errors
// returned by UpdateRole.ValidateAll() if the designated constraints aren't met.
type UpdateRoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleMultiError) AllErrors() []error { return m }

// UpdateRoleValidationError is the validation error returned by
// UpdateRole.Validate if the designated constraints aren't met.
type UpdateRoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleValidationError) ErrorName() string { return "UpdateRoleValidationError" }

// Error satisfies the builtin error interface
func (e UpdateRoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleValidationError{}

// Validate checks the field values on RolePermission with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RolePermission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RolePermission with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RolePermissionMultiError,
// or nil if none found.
func (m *RolePermission) ValidateAll() error {
	return m.validate(true)
}

func (m *RolePermission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PermissionName

	// no validation rules for Description

	// no validation rules for ResourceServerName

	// no validation rules for ResourceServerIdentifier

	// no validation rules for RoleId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return RolePermissionMultiError(errors)
	}

	return nil
}

// RolePermissionMultiError is an error wrapping multiple validation errors
// returned by RolePermission.ValidateAll() if the designated constraints
// aren't met.
type RolePermissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RolePermissionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RolePermissionMultiError) AllErrors() []error { return m }

// RolePermissionValidationError is the validation error returned by
// RolePermission.Validate if the designated constraints aren't met.
type RolePermissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RolePermissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RolePermissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RolePermissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RolePermissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RolePermissionValidationError) ErrorName() string { return "RolePermissionValidationError" }

// Error satisfies the builtin error interface
func (e RolePermissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRolePermission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RolePermissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RolePermissionValidationError{}

// Validate checks the field values on AddPermisionsToRoles with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddPermisionsToRoles) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPermisionsToRoles with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPermisionsToRolesMultiError, or nil if none found.
func (m *AddPermisionsToRoles) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPermisionsToRoles) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceServerIdentifier

	// no validation rules for PermissionName

	// no validation rules for RoleId

	// no validation rules for UserId

	// no validation rules for Auth0Domain

	// no validation rules for Auth0MgmtToken

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return AddPermisionsToRolesMultiError(errors)
	}

	return nil
}

// AddPermisionsToRolesMultiError is an error wrapping multiple validation
// errors returned by AddPermisionsToRoles.ValidateAll() if the designated
// constraints aren't met.
type AddPermisionsToRolesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPermisionsToRolesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPermisionsToRolesMultiError) AllErrors() []error { return m }

// AddPermisionsToRolesValidationError is the validation error returned by
// AddPermisionsToRoles.Validate if the designated constraints aren't met.
type AddPermisionsToRolesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPermisionsToRolesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPermisionsToRolesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPermisionsToRolesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPermisionsToRolesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPermisionsToRolesValidationError) ErrorName() string {
	return "AddPermisionsToRolesValidationError"
}

// Error satisfies the builtin error interface
func (e AddPermisionsToRolesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPermisionsToRoles.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPermisionsToRolesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPermisionsToRolesValidationError{}

// Validate checks the field values on RemoveRolePermission with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveRolePermission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveRolePermission with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveRolePermissionMultiError, or nil if none found.
func (m *RemoveRolePermission) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveRolePermission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceServerIdentifier

	// no validation rules for PermissionName

	// no validation rules for RoleId

	// no validation rules for UserId

	// no validation rules for Auth0Domain

	// no validation rules for Auth0MgmtToken

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return RemoveRolePermissionMultiError(errors)
	}

	return nil
}

// RemoveRolePermissionMultiError is an error wrapping multiple validation
// errors returned by RemoveRolePermission.ValidateAll() if the designated
// constraints aren't met.
type RemoveRolePermissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveRolePermissionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveRolePermissionMultiError) AllErrors() []error { return m }

// RemoveRolePermissionValidationError is the validation error returned by
// RemoveRolePermission.Validate if the designated constraints aren't met.
type RemoveRolePermissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveRolePermissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveRolePermissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveRolePermissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveRolePermissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveRolePermissionValidationError) ErrorName() string {
	return "RemoveRolePermissionValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveRolePermissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveRolePermission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveRolePermissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveRolePermissionValidationError{}

// Validate checks the field values on GetRolePermissions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRolePermissions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRolePermissions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRolePermissionsMultiError, or nil if none found.
func (m *GetRolePermissions) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRolePermissions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for UserId

	// no validation rules for Auth0Domain

	// no validation rules for Auth0MgmtToken

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetRolePermissionsMultiError(errors)
	}

	return nil
}

// GetRolePermissionsMultiError is an error wrapping multiple validation errors
// returned by GetRolePermissions.ValidateAll() if the designated constraints
// aren't met.
type GetRolePermissionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRolePermissionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRolePermissionsMultiError) AllErrors() []error { return m }

// GetRolePermissionsValidationError is the validation error returned by
// GetRolePermissions.Validate if the designated constraints aren't met.
type GetRolePermissionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRolePermissionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRolePermissionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRolePermissionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRolePermissionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRolePermissionsValidationError) ErrorName() string {
	return "GetRolePermissionsValidationError"
}

// Error satisfies the builtin error interface
func (e GetRolePermissionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRolePermissions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRolePermissionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRolePermissionsValidationError{}

// Validate checks the field values on AssignRolesToUsers with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssignRolesToUsers) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignRolesToUsers with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssignRolesToUsersMultiError, or nil if none found.
func (m *AssignRolesToUsers) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignRolesToUsers) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for AssignToUserId

	// no validation rules for UserId

	// no validation rules for Auth0Domain

	// no validation rules for Auth0MgmtToken

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return AssignRolesToUsersMultiError(errors)
	}

	return nil
}

// AssignRolesToUsersMultiError is an error wrapping multiple validation errors
// returned by AssignRolesToUsers.ValidateAll() if the designated constraints
// aren't met.
type AssignRolesToUsersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignRolesToUsersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignRolesToUsersMultiError) AllErrors() []error { return m }

// AssignRolesToUsersValidationError is the validation error returned by
// AssignRolesToUsers.Validate if the designated constraints aren't met.
type AssignRolesToUsersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignRolesToUsersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignRolesToUsersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignRolesToUsersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignRolesToUsersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignRolesToUsersValidationError) ErrorName() string {
	return "AssignRolesToUsersValidationError"
}

// Error satisfies the builtin error interface
func (e AssignRolesToUsersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignRolesToUsers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignRolesToUsersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignRolesToUsersValidationError{}

// Validate checks the field values on ViewUserRoles with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ViewUserRoles) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ViewUserRoles with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ViewUserRolesMultiError, or
// nil if none found.
func (m *ViewUserRoles) ValidateAll() error {
	return m.validate(true)
}

func (m *ViewUserRoles) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Auth0Domain

	// no validation rules for Auth0MgmtToken

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return ViewUserRolesMultiError(errors)
	}

	return nil
}

// ViewUserRolesMultiError is an error wrapping multiple validation errors
// returned by ViewUserRoles.ValidateAll() if the designated constraints
// aren't met.
type ViewUserRolesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ViewUserRolesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ViewUserRolesMultiError) AllErrors() []error { return m }

// ViewUserRolesValidationError is the validation error returned by
// ViewUserRoles.Validate if the designated constraints aren't met.
type ViewUserRolesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ViewUserRolesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ViewUserRolesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ViewUserRolesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ViewUserRolesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ViewUserRolesValidationError) ErrorName() string { return "ViewUserRolesValidationError" }

// Error satisfies the builtin error interface
func (e ViewUserRolesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sViewUserRoles.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ViewUserRolesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ViewUserRolesValidationError{}
